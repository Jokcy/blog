{"version":3,"sources":["webpack:///./src/pages/blog/react/react-clone-element.md"],"names":["_frontmatter","title","date","cover","description","tags","layoutProps","MDXLayout","MDXContent","_ref","components","props","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1___default","Object","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","assign","mdxType","parentName","src","alt","className","isMDXComponent"],"mappings":"4NAKaA,EAAe,CAC1BC,MAAS,kBACTC,KAAQ,aACRC,MAAS,mEACTC,YAAe,6FACfC,KAAQ,CAAC,UAQLC,EAAc,CAClBN,gBAEIO,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,IAAAH,EAAA,gBACD,OAAOI,OAAAC,EAAA,EAAAD,CAACN,EAADM,OAAAE,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EH,OAAAC,EAAA,EAAAD,CAAA,kBACEA,OAAAC,EAAA,EAAAD,CAAA,KAAGI,WAAW,cAAd,yGAAqIJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,gBAArI,uBAEFJ,OAAAC,EAAA,EAAAD,CAAA,mBAAcA,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAAd,uBAAwFJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,YAAxF,2DAAwMJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAAxM,oBACAJ,OAAAC,EAAA,EAAAD,CAAA,gBACAA,OAAAC,EAAA,EAAAD,CAAA,SAAGA,OAAAC,EAAA,EAAAD,CAAA,MAAAA,OAAAE,OAAA,CAAKE,WAAW,KAAQ,CACvBC,IAAO,mEACPC,IAAO,aAEXN,OAAAC,EAAA,EAAAD,CAAA,gCACAA,OAAAC,EAAA,EAAAD,CAAA,iBACAA,OAAAC,EAAA,EAAAD,CAAA,WAAKA,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,OAAU,CAC5BG,UAAa,qBACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,kBACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,iBADd,YAFF,IAI4BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACrDG,UAAa,eADY,UAJ5B,IAM0BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACnDG,UAAa,gBADU,gCAN1B,MAFA,QAWLP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACtBG,UAAa,iBADnB,UAXK,WAcHP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACxBG,UAAa,QACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,aADd,IAEOP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAChCG,UAAa,cADT,OAFP,IAIuBP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAChDG,UAAa,cADO,aAJvB,IAM6BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACtDG,UAAa,gBADa,eAN7B,KAFL,YAdG,6DA2BKP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAChCG,UAAa,QADT,YA3BL,4CA8BmDP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC9EG,UAAa,QADqC,SAGtDP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACtBG,UAAa,aADnB,KAEaP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACjCG,UAAa,cADR,OAFb,MAjCG,aAwCLP,OAAAC,EAAA,EAAAD,CAAA,qCAAgCA,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAAhC,IAAuFJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,SAAvF,gCACAJ,OAAAC,EAAA,EAAAD,CAAA,iCACAA,OAAAC,EAAA,EAAAD,CAAA,WAAKA,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,OAAU,CAC5BG,UAAa,qBACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,kBACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,iBADd,YAFF,IAI4BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACrDG,UAAa,eADY,UAJ5B,IAM0BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACnDG,UAAa,iBAPhB,MAFA,QAWLP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACtBG,UAAa,iBADnB,UAXK,IAawBP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACnDG,UAAa,QACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,aADd,IAEOP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAChCG,UAAa,cADT,MAFP,KAFsB,aAMqBP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACtEG,UAAa,aAD6B,KAEnCP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACjCG,UAAa,cADR,MAFmC,MAnB7C,WA0BNP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACrBG,UAAa,QACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,aADd,IAEOP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAChCG,UAAa,cADT,UAFP,IAI0BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACnDG,UAAa,cADU,UAJ1B,IAM0BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACnDG,UAAa,gBADU,YAN1B,KAFR,QA1BM,0BAqC6BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACxDG,UAAa,QADe,KAGpCP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAClBG,UAAa,aADvB,KAEiBP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACjCG,UAAa,cADR,UAFjB,QAKEP,OAAAC,EAAA,EAAAD,CAAA,yCAAoCA,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAApC,QAA+FJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAC/FJ,OAAAC,EAAA,EAAAD,CAAA,cAASA,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAAT,IAAgEJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,SAAhE,eAAiIJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAAjI,WAA+LJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAA/L,yBAA2QJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAA3Q,yBAAuVJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAAvV,SAAmZJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,WAAnZ,IAA2cJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,QAA3c,eACAJ,OAAAC,EAAA,EAAAD,CAAA,WAAKA,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,OAAU,CAC5BG,UAAa,qBACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,kBACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,iBADd,YAFF,IAI4BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACrDG,UAAa,eADY,UAJ5B,IAM0BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACnDG,UAAa,gBADU,eAENP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3CG,UAAa,gBADE,gBAFM,MAN1B,MAFA,QAaLP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACtBG,UAAa,iBADnB,UAbK,IAewBP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACnDG,UAAa,QACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,aADd,IAEOP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAChCG,UAAa,cADT,MAFP,KAFsB,YAMoBP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACrEG,UAAa,aAD4B,KAElCP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACjCG,UAAa,cADR,MAFkC,MArB5C,QA2BLP,OAAAC,EAAA,EAAAD,CAAA,kDACAA,OAAAC,EAAA,EAAAD,CAAA,WAAKA,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,OAAU,CAC5BG,UAAa,qBACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,kBACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,iBADd,YAFF,IAI4BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACrDG,UAAa,eADY,aAJ5B,IAM6BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACtDG,UAAa,iBAPhB,MAFA,QAWLP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACtBG,UAAa,iBADnB,UAXK,IAawBP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACnDG,UAAa,QACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,aADd,IAEOP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAChCG,UAAa,cADT,UAFP,IAI0BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACnDG,UAAa,cADU,WAJ1B,IAM2BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACpDG,UAAa,gBADW,qBAN3B,OAFsB,SAY7BP,OAAAC,EAAA,EAAAD,CAAA,0BAAqBA,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,SAArB,6CACAJ,OAAAC,EAAA,EAAAD,CAAA,iBACAA,OAAAC,EAAA,EAAAD,CAAA,+BAA0BA,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,SAA1B,kBAA8FJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAA9F,IAAqJJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAArJ,KAA6MJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,QAA7M,kBAAgRJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,gBAAhR,KACAJ,OAAAC,EAAA,EAAAD,CAAA,WAAKA,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,OAAU,CAC5BG,UAAa,qBACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,kBACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,iBADd,YAFF,IAI4BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACrDG,UAAa,eADY,UAJ5B,IAM0BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACnDG,UAAa,gBADU,wBAN1B,MAFA,QAWLP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACtBG,UAAa,iBADnB,UAXK,WAcHP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACxBG,UAAa,QACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,aADd,IAEOP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAChCG,UAAa,cADT,OAFP,IAIuBP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAChDG,UAAa,cADO,aAJvB,IAM6BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACtDG,UAAa,gBADa,eAN7B,KAFL,YAdG,yCAyBgDP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3EG,UAAa,QADkC,YAzBhD,4CA4BmDP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC9EG,UAAa,QADqC,SAGtDP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACtBG,UAAa,aADnB,KAEaP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACjCG,UAAa,cADR,OAFb,MA/BG,aAsCLP,OAAAC,EAAA,EAAAD,CAAA,gCAA2BA,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAC3BJ,OAAAC,EAAA,EAAAD,CAAA,WAAKA,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,OAAU,CAC5BG,UAAa,qBADZ,mCAEoCP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC/DG,UAAa,gBADsB,qBAFpC,YAKLP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACtBG,UAAa,QACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,aADd,IAEOP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAChCG,UAAa,cADT,OAFP,KAFP,eAMqDP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACzEG,UAAa,aADgC,KAEtCP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACjCG,UAAa,cADR,OAFsC,MAXhD,KAgBPP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACpBG,UAAa,QACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,aADd,KAEQP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACjCG,UAAa,cADR,UAFR,QAKPP,OAAAC,EAAA,EAAAD,CAAA,mCAA8BA,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,gBAA9B,cAAqGJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,SAArG,YAAmKJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,OAAnK,gBAAmOJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,gBAAnO,QACAJ,OAAAC,EAAA,EAAAD,CAAA,cAASA,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,OAAT,KAA8DJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,SAA9D,iBACAJ,OAAAC,EAAA,EAAAD,CAAA,WAAKA,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,OAAU,CAC5BG,UAAa,qBACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,iBADd,UAFA,MAKNP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACrBG,UAAa,QACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,aADd,IAEOP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAChCG,UAAa,cADT,OAFP,IAIuBP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAChDG,UAAa,cADO,MAJvB,IAMsBP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC/CG,UAAa,gBADM,QANtB,KAFR,UAUkDP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACrEG,UAAa,aAD4B,KAElCP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACjCG,UAAa,cADR,OAFkC,MAf5C,OAqBPP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACpBG,UAAa,iBADrB,SArBO,yBAwBaP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACxCG,UAAa,gBADD,SAxBb,OA0B0BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACrDG,UAAa,cADY,MA1B1B,KA4BqBP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAChDG,UAAa,gBADO,QA5BrB,OA8ByBP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACpDG,UAAa,gBADW,aA9BzB,MAiCLP,OAAAC,EAAA,EAAAD,CAAA,uBACAA,OAAAC,EAAA,EAAAD,CAAA,UACEA,OAAAC,EAAA,EAAAD,CAAA,MAAII,WAAW,MAAKJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,MAAvB,aAApB,uBAAkGJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,MAAvB,UAAlG,WAAiKJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,MAAvB,UAAjK,KACAJ,OAAAC,EAAA,EAAAD,CAAA,MAAII,WAAW,MAAKJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,MAAvB,UAApB,QAAgFJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,MAAvB,SAAhF,MAAyIJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,MAAvB,OAAzI,IAA8LJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,MAAvB,OAA9L,WACAJ,OAAAC,EAAA,EAAAD,CAAA,MAAII,WAAW,MAAKJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,MAAvB,YAApB,aAAuFJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,MAAvB,gBAAvF,IAAqJJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,MAAvB,SAArJ,IAA4MJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,MAAvB,UAA5M,QAEFJ,OAAAC,EAAA,EAAAD,CAAA,uBAAkBA,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,gBAAlB,+CAA0HJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,kBAA1H,WAAgMJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,gBAAhM,KACAJ,OAAAC,EAAA,EAAAD,CAAA,0BAAqBA,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAArB,OAA+EJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,gBAA/E,iBAAyJJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,YAAzJ,QACAJ,OAAAC,EAAA,EAAAD,CAAA,4DAAuDA,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAAvD,KACAJ,OAAAC,EAAA,EAAAD,CAAA,WAAKA,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,OAAU,CAC5BG,UAAa,qBADZ,uCAEwCP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACnEG,UAAa,gBAD0B,iCAFxC,SAMPP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACpBG,UAAa,QACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,aADd,KAEQP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACjCG,UAAa,cADR,UAFR,QAKPP,OAAAC,EAAA,EAAAD,CAAA,0BACAA,OAAAC,EAAA,EAAAD,CAAA,oDACAA,OAAAC,EAAA,EAAAD,CAAA,iBACAA,OAAAC,EAAA,EAAAD,CAAA,sBAAiBA,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAAjB,OAA2EJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAA3E,wBAAsJJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,SAAtJ,gBAAwNJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAAxN,aAAwRJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,QAAxR,IAA6UJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,SAA7U,mBACAJ,OAAAC,EAAA,EAAAD,CAAA,WAAKA,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,OAAU,CAC5BG,UAAa,qBACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,kBACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,iBADd,YAFF,IAI4BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACrDG,UAAa,eADY,UAJ5B,IAM0BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACnDG,UAAa,gBADU,eAENP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3CG,UAAa,gBADE,gBAFM,aAIiBP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAClEG,UAAa,gBADyB,SAJjB,MAN1B,MAFA,QAeLP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACtBG,UAAa,iBADnB,UAfK,IAiBwBP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACnDG,UAAa,QACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,aADd,IAEOP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAChCG,UAAa,cADT,MAFP,IAIsBP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC/CG,UAAa,cADM,SAJtB,IAMyBP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAClDG,UAAa,gBADS,MANzB,IAQsBP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC/CG,UAAa,cADM,SARtB,QAFsB,YAY0BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3EG,UAAa,aADkC,KAExCP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACjCG,UAAa,cADR,MAFwC,MA7BlD,QAmCLP,OAAAC,EAAA,EAAAD,CAAA,aAAQA,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAAR,UAAqEJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAArE,QAAgIJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,SAAhI,cAAgMJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAAhM,cAAiQJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,QAAjQ,iBAAmUJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,QAAnU,UAA8XJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAA9X,qFACAJ,OAAAC,EAAA,EAAAD,CAAA,wDAAmDA,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,sBAAnD,WAA6HJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,WAC7HJ,OAAAC,EAAA,EAAAD,CAAA,WAAKA,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,OAAU,CAC5BG,UAAa,qBACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,kBACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,iBADd,YAFF,IAI4BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACrDG,UAAa,eADY,UAJ5B,IAM0BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACnDG,UAAa,gBADU,wBAN1B,MAFA,QAWLP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACtBG,UAAa,iBADnB,UAXK,WAcHP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACxBG,UAAa,QACZP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC3BG,UAAa,aADd,IAEOP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAChCG,UAAa,cADT,OAFP,IAIuBP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAChDG,UAAa,cADO,aAJvB,IAM6BP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACtDG,UAAa,gBADa,eAN7B,KAFL,YAdG,mGA2BKP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAChCG,UAAa,QADT,YA3BL,4CA8BmDP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CAC9EG,UAAa,QADqC,SAGtDP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACtBG,UAAa,aADnB,KAEaP,OAAAC,EAAA,EAAAD,CAAA,OAAAA,OAAAE,OAAA,CAAME,WAAW,QAAW,CACjCG,UAAa,cADR,OAFb,MAjCG,aAwCLP,OAAAC,EAAA,EAAAD,CAAA,0BAAqBA,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,UAArB,KAA6EJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,eAA7E,QAA6IJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,SAA7I,oBACAJ,OAAAC,EAAA,EAAAD,CAAA,qBAAgBA,OAAAC,EAAA,EAAAD,CAAA,UAAQI,WAAW,KAAnB,MAAhB,KAA4DJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,gBAA5D,kBAAuIJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,WAAvI,QAAmMJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,SAAnM,QAA6PJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,YAA7P,QAA0TJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,iBAA1T,4BACAJ,OAAAC,EAAA,EAAAD,CAAA,yBAAoBA,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,WAApB,eAAuFJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,WAAvF,IAA+IJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,SAA/I,YAA6MJ,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,gBAA7M,KACAJ,OAAAC,EAAA,EAAAD,CAAA,WACAA,OAAAC,EAAA,EAAAD,CAAA,0EAAqEA,OAAAC,EAAA,EAAAD,CAAA,cAAYI,WAAW,KAAvB,gBAArE,oFAIJT,EAAWa,gBAAiB","file":"component---src-pages-blog-react-react-clone-element-md-486ae4045e73761437a9.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"React组件化复用的一些技巧\",\n  \"date\": \"2019-02-17\",\n  \"cover\": \"http://ww1.sinaimg.cn/large/a90af92bly1g0hh3u7v16j20go0b4q37.jpg\",\n  \"description\": \"React 中有一个非常不常用的 API 叫做 cloneElement，百分之80的同学可能都没用过，但是在处理组件复用的过程中，这个 API 却可以帮组我们完成非常多有用的工作\",\n  \"tags\": [\"react\"]\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <blockquote>\n      <p parentName=\"blockquote\">{`复用是组件化开发体系的立命之本，可以说组件化的初衷就是为了复用性。但是组件化的复用方式也存在一定的问题，其中拆分粒度就是其中一个绕不开的话题，今天咱们就来讲一讲 React 当中的一个不太常用的 API：`}<inlineCode parentName=\"p\">{`cloneElement`}</inlineCode>{`，他如何帮组我们更好得进行组件拆分。`}</p>\n    </blockquote>\n    <p>{`假如我们有一个`}<inlineCode parentName=\"p\">{`Layout`}</inlineCode>{`组件，那么一般来说这个组件主要接收的就是`}<inlineCode parentName=\"p\">{`children`}</inlineCode>{`，把它放在主要内容的部分，然后组件本身的节点来控制布局，那么这个时候如果我们这个布局包含两个部分呢，比如还有一个`}<inlineCode parentName=\"p\">{`header`}</inlineCode>{`部分，是跟主要内容有明显区分的。`}</p>\n    <p>{`比如：`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"http://ww1.sinaimg.cn/large/a90af92bly1g0hh3u7v16j20go0b4q37.jpg\",\n        \"alt\": \"layout\"\n      }}></img></p>\n    <p>{`那么我们这个时候会如何设计这个组件呢？`}</p>\n    <h3>{`版本一`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"hljs language-js\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"hljs-function\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-keyword\"\n          }}>{`function`}</span>{` `}<span parentName=\"span\" {...{\n            \"className\": \"hljs-title\"\n          }}>{`Layout`}</span>{`(`}<span parentName=\"span\" {...{\n            \"className\": \"hljs-params\"\n          }}>{`{ header: Header, children }`}</span>{`) `}</span>{`{\n  `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`return`}</span>{` (\n    `}<span parentName=\"code\" {...{\n          \"className\": \"xml\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-tag\"\n          }}>{`<`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-name\"\n            }}>{`div`}</span>{` `}<span parentName=\"span\" {...{\n              \"className\": \"hljs-attr\"\n            }}>{`className`}</span>{`=`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-string\"\n            }}>{`'container'`}</span>{`>`}</span>{`\n      `}</span>{`<div className='header'>\n        <Header />\n      </div>`}<span parentName=\"code\" {...{\n          \"className\": \"xml\"\n        }}>{`\n      `}</span>{`<div classNmae='content'>{children}</div>`}<span parentName=\"code\" {...{\n          \"className\": \"xml\"\n        }}>{`\n    `}<span parentName=\"span\" {...{\n            \"className\": \"hljs-tag\"\n          }}>{`</`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-name\"\n            }}>{`div`}</span>{`>`}</span></span>{`\n  )\n}`}</code></pre>\n    <p>{`这应该是我们比较常见的方式，我们通过把具体组件作为`}<inlineCode parentName=\"p\">{`Layout`}</inlineCode>{`的`}<inlineCode parentName=\"p\">{`props`}</inlineCode>{`传入进来，然后按照组件的写法把它写入到组件渲染内容之中。`}</p>\n    <p>{`我们想要使用这个组件，一般会像下面这样：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"hljs language-js\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"hljs-function\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-keyword\"\n          }}>{`function`}</span>{` `}<span parentName=\"span\" {...{\n            \"className\": \"hljs-title\"\n          }}>{`Header`}</span>{`(`}<span parentName=\"span\" {...{\n            \"className\": \"hljs-params\"\n          }}></span>{`) `}</span>{`{\n  `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`return`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"xml\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-tag\"\n          }}>{`<`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-name\"\n            }}>{`h1`}</span>{`>`}</span>{`Title Here`}<span parentName=\"span\" {...{\n            \"className\": \"hljs-tag\"\n          }}>{`</`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-name\"\n            }}>{`h1`}</span>{`>`}</span></span>{`\n}\n\n;`}<span parentName=\"code\" {...{\n          \"className\": \"xml\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-tag\"\n          }}>{`<`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-name\"\n            }}>{`Layout`}</span>{` `}<span parentName=\"span\" {...{\n              \"className\": \"hljs-attr\"\n            }}>{`header`}</span>{`=`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-string\"\n            }}>{`{Header}`}</span>{`>`}</span>{`\n  `}</span>{`<div>content here</div>`}<span parentName=\"code\" {...{\n          \"className\": \"xml\"\n        }}>{`\n`}<span parentName=\"span\" {...{\n            \"className\": \"hljs-tag\"\n          }}>{`</`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-name\"\n            }}>{`Layout`}</span>{`>`}</span></span></code></pre>\n    <p>{`那么这样做有什么问题呢？显然是有的，最明显的就是无法在使用`}<inlineCode parentName=\"p\">{`Header`}</inlineCode>{`的时候指定`}<inlineCode parentName=\"p\">{`props`}</inlineCode></p>\n    <p>{`如果`}<inlineCode parentName=\"p\">{`Header`}</inlineCode>{`有`}<inlineCode parentName=\"p\">{`props`}</inlineCode>{`，那么就我们只能硬编码在`}<inlineCode parentName=\"p\">{`Layout`}</inlineCode>{`里面，不能在使用`}<inlineCode parentName=\"p\">{`Header`}</inlineCode>{`组件的地方进行声明，所以如果我们想要复用一个`}<inlineCode parentName=\"p\">{`Header`}</inlineCode>{`组件，我们可能需要再声明一个组件，比如我们给`}<inlineCode parentName=\"p\">{`Header`}</inlineCode>{`组件一个叫做`}<inlineCode parentName=\"p\">{`message`}</inlineCode>{`的`}<inlineCode parentName=\"p\">{`prop`}</inlineCode>{`用来指定显示的文字内容`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"hljs language-js\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"hljs-function\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-keyword\"\n          }}>{`function`}</span>{` `}<span parentName=\"span\" {...{\n            \"className\": \"hljs-title\"\n          }}>{`Header`}</span>{`(`}<span parentName=\"span\" {...{\n            \"className\": \"hljs-params\"\n          }}>{`{ message = `}<span parentName=\"span\" {...{\n              \"className\": \"hljs-string\"\n            }}>{`'Title Here'`}</span>{` }`}</span>{`) `}</span>{`{\n  `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`return`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"xml\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-tag\"\n          }}>{`<`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-name\"\n            }}>{`h1`}</span>{`>`}</span>{`{message}`}<span parentName=\"span\" {...{\n            \"className\": \"hljs-tag\"\n          }}>{`</`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-name\"\n            }}>{`h1`}</span>{`>`}</span></span>{`\n}`}</code></pre>\n    <p>{`那么如果我们想要在不同页面复用这个组件并且显示不同的标题，我们需要这么做：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"hljs language-js\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"hljs-function\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-keyword\"\n          }}>{`function`}</span>{` `}<span parentName=\"span\" {...{\n            \"className\": \"hljs-title\"\n          }}>{`BigHeader`}</span>{`(`}<span parentName=\"span\" {...{\n            \"className\": \"hljs-params\"\n          }}></span>{`) `}</span>{`{\n  `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`return`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"xml\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-tag\"\n          }}>{`<`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-name\"\n            }}>{`Header`}</span>{` `}<span parentName=\"span\" {...{\n              \"className\": \"hljs-attr\"\n            }}>{`message`}</span>{`=`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-string\"\n            }}>{`'The Other Title'`}</span>{` />`}</span>{`\n}`}</span></code></pre>\n    <p>{`这么做显然在组件较为复杂而且`}<inlineCode parentName=\"p\">{`props`}</inlineCode>{`较多的情况下，也可以达到一定的复用效果，但是追求极致的我们肯定不希望仅仅局限于此。`}</p>\n    <h3>{`第二版`}</h3>\n    <p>{`那么有没有办法让我们可以在使用时能指定`}<inlineCode parentName=\"p\">{`props`}</inlineCode>{`呢？答案肯定是有的，我们可以将`}<inlineCode parentName=\"p\">{`Layout`}</inlineCode>{`的`}<inlineCode parentName=\"p\">{`header`}</inlineCode>{`这个`}<inlineCode parentName=\"p\">{`prop`}</inlineCode>{`接收的不是组件本体，而是具体的`}<inlineCode parentName=\"p\">{`ReactElement`}</inlineCode>{`。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"hljs language-js\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"hljs-function\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-keyword\"\n          }}>{`function`}</span>{` `}<span parentName=\"span\" {...{\n            \"className\": \"hljs-title\"\n          }}>{`Layout`}</span>{`(`}<span parentName=\"span\" {...{\n            \"className\": \"hljs-params\"\n          }}>{`{ header, children }`}</span>{`) `}</span>{`{\n  `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`return`}</span>{` (\n    `}<span parentName=\"code\" {...{\n          \"className\": \"xml\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-tag\"\n          }}>{`<`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-name\"\n            }}>{`div`}</span>{` `}<span parentName=\"span\" {...{\n              \"className\": \"hljs-attr\"\n            }}>{`className`}</span>{`=`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-string\"\n            }}>{`'container'`}</span>{`>`}</span>{`\n      `}</span>{`<div className='header'>{header}</div>`}<span parentName=\"code\" {...{\n          \"className\": \"xml\"\n        }}>{`\n      `}</span>{`<div classNmae='content'>{children}</div>`}<span parentName=\"code\" {...{\n          \"className\": \"xml\"\n        }}>{`\n    `}<span parentName=\"span\" {...{\n            \"className\": \"hljs-tag\"\n          }}>{`</`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-name\"\n            }}>{`div`}</span>{`>`}</span></span>{`\n  )\n}`}</code></pre>\n    <p>{`那么我们在使用的时候就可以非常方便得指定`}<inlineCode parentName=\"p\">{`props`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"hljs language-js\"\n      }}>{`<Layout header={<Header message=`}<span parentName=\"code\" {...{\n          \"className\": \"hljs-string\"\n        }}>{`'The Other Title'`}</span>{` />}>\n  `}<span parentName=\"code\" {...{\n          \"className\": \"xml\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-tag\"\n          }}>{`<`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-name\"\n            }}>{`div`}</span>{`>`}</span>{`Content Here`}<span parentName=\"span\" {...{\n            \"className\": \"hljs-tag\"\n          }}>{`</`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-name\"\n            }}>{`div`}</span>{`>`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"xml\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-tag\"\n          }}>{`</`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-name\"\n            }}>{`Layout`}</span>{`>`}</span></span></code></pre>\n    <p>{`要理解我们可以这么做，首先我们需要弄清楚什么是`}<inlineCode parentName=\"p\">{`ReactElement`}</inlineCode>{`。因为我们大部分时候写`}<inlineCode parentName=\"p\">{`React`}</inlineCode>{`组件的时候用的都是`}<inlineCode parentName=\"p\">{`JSX`}</inlineCode>{`，所以很多同学可能并不知道`}<inlineCode parentName=\"p\">{`ReactElement`}</inlineCode>{`的存在。`}</p>\n    <p>{`其实`}<inlineCode parentName=\"p\">{`JSX`}</inlineCode>{`经过`}<inlineCode parentName=\"p\">{`babel`}</inlineCode>{`翻译之后得到的是如下代码：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"hljs language-js\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"hljs-comment\"\n        }}>{`// jsx`}</span>{`\n;`}<span parentName=\"code\" {...{\n          \"className\": \"xml\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-tag\"\n          }}>{`<`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-name\"\n            }}>{`div`}</span>{` `}<span parentName=\"span\" {...{\n              \"className\": \"hljs-attr\"\n            }}>{`id`}</span>{`=`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-string\"\n            }}>{`'id'`}</span>{`>`}</span>{`content`}<span parentName=\"span\" {...{\n            \"className\": \"hljs-tag\"\n          }}>{`</`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-name\"\n            }}>{`div`}</span>{`>`}</span></span>{`\n\n`}<span parentName=\"code\" {...{\n          \"className\": \"hljs-comment\"\n        }}>{`// js`}</span>{`\nReact.createElement(`}<span parentName=\"code\" {...{\n          \"className\": \"hljs-string\"\n        }}>{`'div'`}</span>{`, { `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-attr\"\n        }}>{`id`}</span>{`: `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-string\"\n        }}>{`'id'`}</span>{` }, `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-string\"\n        }}>{`'content'`}</span>{`)`}</code></pre>\n    <p>{`这个函数接收三个参数`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`component`}</inlineCode>{`具体渲染的组件，包括原生 dom 节点(`}<inlineCode parentName=\"li\">{`string`}</inlineCode>{`)和自定义组件(`}<inlineCode parentName=\"li\">{`object`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`config`}</inlineCode>{`，包括所有`}<inlineCode parentName=\"li\">{`props`}</inlineCode>{`再加上`}<inlineCode parentName=\"li\">{`key`}</inlineCode>{`和`}<inlineCode parentName=\"li\">{`ref`}</inlineCode>{`形成的字典对象`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`children`}</inlineCode>{`，子节点内容，可以是`}<inlineCode parentName=\"li\">{`ReactElement`}</inlineCode>{`、`}<inlineCode parentName=\"li\">{`Array`}</inlineCode>{`、`}<inlineCode parentName=\"li\">{`string`}</inlineCode>{`等内容`}</li>\n    </ul>\n    <p>{`最后他返回的是一个叫做`}<inlineCode parentName=\"p\">{`ReactElement`}</inlineCode>{`类型的对象，他会包含后续 React 渲染过程中需要用到的一个节点包含的所有信息，我们的`}<inlineCode parentName=\"p\">{`props.children`}</inlineCode>{`其实就是最典型的`}<inlineCode parentName=\"p\">{`ReactElement`}</inlineCode>{`。`}</p>\n    <p>{`所以在上诉例子中，我们传入的`}<inlineCode parentName=\"p\">{`header`}</inlineCode>{`就是一个`}<inlineCode parentName=\"p\">{`ReactElement`}</inlineCode>{`，所以可以直接作为其他节点的`}<inlineCode parentName=\"p\">{`children`}</inlineCode>{`而使用。`}</p>\n    <p>{`同时使用这种方式我们还获得来一个非常大的优势，那就是我们甚至可以重新定义一个组件，就可以直接使用`}<inlineCode parentName=\"p\">{`Layout`}</inlineCode>{`。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"hljs language-js\"\n      }}>{`<Layout header={<h1>The Other Title<`}<span parentName=\"code\" {...{\n          \"className\": \"hljs-regexp\"\n        }}>{`/h1>}>\n  <div>Content Here</`}</span>{`div>\n`}<span parentName=\"code\" {...{\n          \"className\": \"xml\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-tag\"\n          }}>{`</`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-name\"\n            }}>{`Layout`}</span>{`>`}</span></span></code></pre>\n    <p>{`这样同样也是可以行得通的。`}</p>\n    <p>{`那么是否到这里我们就大功告成来呢？NO，NO，NO，我们还是有值得优化的地方。`}</p>\n    <h3>{`第三版`}</h3>\n    <p>{`试想一下，如果我们的`}<inlineCode parentName=\"p\">{`Layout`}</inlineCode>{`中接收来`}<inlineCode parentName=\"p\">{`header`}</inlineCode>{`是一个节点，但是呢他希望对传入的组件的一些`}<inlineCode parentName=\"p\">{`props`}</inlineCode>{`有强制的要求呢？比如我们的`}<inlineCode parentName=\"p\">{`Header`}</inlineCode>{`组件如果还有另外一个`}<inlineCode parentName=\"p\">{`prop`}</inlineCode>{`叫`}<inlineCode parentName=\"p\">{`color`}</inlineCode>{`，用来指定文字内容的显示颜色：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"hljs language-js\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"hljs-function\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-keyword\"\n          }}>{`function`}</span>{` `}<span parentName=\"span\" {...{\n            \"className\": \"hljs-title\"\n          }}>{`Header`}</span>{`(`}<span parentName=\"span\" {...{\n            \"className\": \"hljs-params\"\n          }}>{`{ message = `}<span parentName=\"span\" {...{\n              \"className\": \"hljs-string\"\n            }}>{`'Title Here'`}</span>{`, color = `}<span parentName=\"span\" {...{\n              \"className\": \"hljs-string\"\n            }}>{`'red'`}</span>{` }`}</span>{`) `}</span>{`{\n  `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`return`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"xml\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-tag\"\n          }}>{`<`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-name\"\n            }}>{`h1`}</span>{` `}<span parentName=\"span\" {...{\n              \"className\": \"hljs-attr\"\n            }}>{`style`}</span>{`=`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-string\"\n            }}>{`{{`}</span>{` `}<span parentName=\"span\" {...{\n              \"className\": \"hljs-attr\"\n            }}>{`color`}</span>{` }}>`}</span>{`{message}`}<span parentName=\"span\" {...{\n            \"className\": \"hljs-tag\"\n          }}>{`</`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-name\"\n            }}>{`h1`}</span>{`>`}</span></span>{`\n}`}</code></pre>\n    <p>{`而`}<inlineCode parentName=\"p\">{`Layout`}</inlineCode>{`要求所有传入的`}<inlineCode parentName=\"p\">{`Header`}</inlineCode>{`必须颜色是`}<inlineCode parentName=\"p\">{`green`}</inlineCode>{`，显示我们也可以在使用`}<inlineCode parentName=\"p\">{`Header`}</inlineCode>{`组件的时候自己指定这个`}<inlineCode parentName=\"p\">{`prop`}</inlineCode>{`，但是如果我们需要强制指定的`}<inlineCode parentName=\"p\">{`prop`}</inlineCode>{`很多，而且使用`}<inlineCode parentName=\"p\">{`Layout`}</inlineCode>{`的地方也很多，那么明显我们会写很多重复代码，而且如果后面我们需要修改这个要求的时候也会导致多次修改，甚至有些地方忘了修改而导致 bug。那么这时候我们该怎么做呢？`}</p>\n    <p>{`我们可以使用一个 API，这个 API 并不常用，但是在这种场景下，他却非常有用，这就是`}<inlineCode parentName=\"p\">{`React.cloneElement`}</inlineCode>{`，我们来修改一下`}<inlineCode parentName=\"p\">{`Layout`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"hljs language-js\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"hljs-function\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-keyword\"\n          }}>{`function`}</span>{` `}<span parentName=\"span\" {...{\n            \"className\": \"hljs-title\"\n          }}>{`Layout`}</span>{`(`}<span parentName=\"span\" {...{\n            \"className\": \"hljs-params\"\n          }}>{`{ header, children }`}</span>{`) `}</span>{`{\n  `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`return`}</span>{` (\n    `}<span parentName=\"code\" {...{\n          \"className\": \"xml\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-tag\"\n          }}>{`<`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-name\"\n            }}>{`div`}</span>{` `}<span parentName=\"span\" {...{\n              \"className\": \"hljs-attr\"\n            }}>{`className`}</span>{`=`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-string\"\n            }}>{`'container'`}</span>{`>`}</span>{`\n      `}</span>{`<div className='header'>\n        {React.cloneElement(header, { color: 'green' })}\n      </div>`}<span parentName=\"code\" {...{\n          \"className\": \"xml\"\n        }}>{`\n      `}</span>{`<div classNmae='content'>{children}</div>`}<span parentName=\"code\" {...{\n          \"className\": \"xml\"\n        }}>{`\n    `}<span parentName=\"span\" {...{\n            \"className\": \"hljs-tag\"\n          }}>{`</`}<span parentName=\"span\" {...{\n              \"className\": \"hljs-name\"\n            }}>{`div`}</span>{`>`}</span></span>{`\n  )\n}`}</code></pre>\n    <p>{`通过这样，我们真正渲染出来的`}<inlineCode parentName=\"p\">{`Header`}</inlineCode>{`他的`}<inlineCode parentName=\"p\">{`props.color`}</inlineCode>{`就永远都是`}<inlineCode parentName=\"p\">{`green`}</inlineCode>{`。那么这个 API 是啥意思呢？`}</p>\n    <p>{`顾名思义，他是用来`}<strong parentName=\"p\">{`克隆`}</strong>{`一个`}<inlineCode parentName=\"p\">{`ReactElement`}</inlineCode>{`,他接收三个参数，第一个是目标`}<inlineCode parentName=\"p\">{`element`}</inlineCode>{`，第二个是`}<inlineCode parentName=\"p\">{`props`}</inlineCode>{`，第三个是`}<inlineCode parentName=\"p\">{`children`}</inlineCode>{`。可见他跟`}<inlineCode parentName=\"p\">{`createElement`}</inlineCode>{`非常像，唯一的区别是第一个参数从组件变成来节点。`}</p>\n    <p>{`他做的事情其实就是拷贝目标`}<inlineCode parentName=\"p\">{`element`}</inlineCode>{`，并把后面两个参数覆盖原`}<inlineCode parentName=\"p\">{`element`}</inlineCode>{`的`}<inlineCode parentName=\"p\">{`props`}</inlineCode>{`，以此创建一个新的`}<inlineCode parentName=\"p\">{`ReactElement`}</inlineCode>{`。`}</p>\n    <hr></hr>\n    <p>{`那么到此，我们的优化过程也差不多来，当然 demo 显然是非常简单的代码，现实中的问题往往要复杂很多，比如接收的如果不是一个`}<inlineCode parentName=\"p\">{`ReactElement`}</inlineCode>{`而是数组，字符串该如何处理。那么这些问题在这里就不再继续深入来，留给各位小伙伴自己去思考吧，毕竟万变不离其宗，知道了核心思路之后，其他问题也就可以迎刃而解来。`}</p>\n\n    </MDXLayout>;\n}\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}