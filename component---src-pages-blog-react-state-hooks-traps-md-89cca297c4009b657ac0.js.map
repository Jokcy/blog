{"version":3,"sources":["webpack:///./src/pages/blog/react/state-hooks-traps.md"],"names":["_frontmatter","title","date","cover","description","tags","layoutProps","MDXLayout","MDXContent","_ref","components","props","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1___default","Object","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","assign","mdxType","parentName","src","style","width","height","borderWidth","borderRadius","overflow","sandbox","className","isMDXComponent"],"mappings":"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","file":"component---src-pages-blog-react-state-hooks-traps-md-89cca297c4009b657ac0.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"React State Hooks 中存在的陷阱，在使用 Hooks 之前必须掌握\",\n  \"date\": \"2019-03-18\",\n  \"cover\": \"http://ww1.sinaimg.cn/large/a90af92bly1g0e2q3qzrvj20u00gwt95.jpg\",\n  \"description\": \"React Hooks 是 React18 版本正式开放的 API，其便利的使用方式，以及强大的逻辑抽离能力让所有 React 青睐。但是在使用 Hooks 的过程中有一些陷阱存在，如果你不明白他们的原因，那么你在使用 Hooks 的时候很可能就会出现问题...\",\n  \"tags\": [\"react\"]\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <blockquote>\n      <p parentName=\"blockquote\">{`伴随着 React Hooks 的正式发布，因为其易用性以及对于逻辑代码的复用性更强，毫无疑问越来越多的同学会偏向于使用 Hooks 来写自己的组件。但是随着使用的深入，我们发现了一些 State Hooks 的陷阱，那么今天我们就来分析一下 State Hooks 存在的一些陷阱，帮助同学们踩坑。`}</p>\n    </blockquote>\n    <p>{`前几天在 twitter 上看到了一个关于 Hooks 的讨论，其内容围绕着下面的 demo：`}</p>\n    <iframe src=\"https://codesandbox.io/embed/546p26y44x?fontsize=14&view=editor\" style={{\n      \"width\": \"100%\",\n      \"height\": \"500px\",\n      \"borderWidth\": \"0px\",\n      \"borderRadius\": \"4px\",\n      \"overflow\": \"hidden\"\n    }} sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n    <p>{`这里的代码想要实现的功能如下：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`点击 Start 开始执行 interval，并且一旦有可能就往 `}<inlineCode parentName=\"li\">{`lapse`}</inlineCode>{` 上加一`}</li>\n      <li parentName=\"ul\">{`点击 Stop 后取消 interval`}</li>\n      <li parentName=\"ul\">{`点击 Clear 会取消 interval，并且设置 `}<inlineCode parentName=\"li\">{`lapse`}</inlineCode>{` 为 0`}</li>\n    </ul>\n    <p>{`但是这个例子在实际执行过程中会出现一个问题，那就是在 interval 开启的情况下，直接执行 clear，会停止 interval，但是显示的 `}<inlineCode parentName=\"p\">{`lapse`}</inlineCode>{` 却不是 0，那么这是为什么呢？`}</p>\n    <p>{`出现这样的情况主要原因是：`}<inlineCode parentName=\"p\">{`useEffect`}</inlineCode>{` 是异步的，也就是说我们执行 `}<inlineCode parentName=\"p\">{`useEffect`}</inlineCode>{` 中绑定的函数或者是解绑的函数，`}<strong parentName=\"p\">{`都不是在一次 `}<inlineCode parentName=\"strong\">{`setState`}</inlineCode>{` 产生的更新中被同步执行的。`}</strong>{`啥意思呢？我们来模拟一下代码的执行顺序：`}</p>\n    <p>{`在我们点击了 `}<inlineCode parentName=\"p\">{`clear`}</inlineCode>{` 之后，我们调用来 `}<inlineCode parentName=\"p\">{`setLapse`}</inlineCode>{` 和 `}<inlineCode parentName=\"p\">{`setRunning`}</inlineCode>{`，这两个方法是用来更新 state 的，所以他们会标记组件更新，然后通知 React 我们需要重新渲染来。`}</p>\n    <p>{`然后 React 开始来重新渲染的流程，并很快执行到了 `}<inlineCode parentName=\"p\">{`Stopwatch`}</inlineCode>{` 组件。`}</p>\n    <p>{`注意以上都是同步执行的过程，所以不会存在在这个过程中 `}<inlineCode parentName=\"p\">{`setInterval`}</inlineCode>{` 又触发的情况，所以在更新 `}<inlineCode parentName=\"p\">{`Stopwatch`}</inlineCode>{` 的时候，如果我们能同步得执行 `}<inlineCode parentName=\"p\">{`useEffect`}</inlineCode>{` 的解绑函数，那么就可以在这次 JavaScript 的调用栈中清除这个 `}<inlineCode parentName=\"p\">{`interval`}</inlineCode>{`，而不会出现这种情况。`}</p>\n    <p>{`但是恰恰因为 `}<inlineCode parentName=\"p\">{`useEffect`}</inlineCode>{` 是异步执行的，他要在 React 走完本次更新之后才会执行解绑以及重新绑定的函数。那么这就给 `}<inlineCode parentName=\"p\">{`interval`}</inlineCode>{` 再次触发的机会，`}<strong parentName=\"p\">{`这也就导致来，我们设置 `}<inlineCode parentName=\"strong\">{`lapse`}</inlineCode>{` 为 0 之后，他又在 `}<inlineCode parentName=\"strong\">{`interval`}</inlineCode>{` 中被更新成了一个计算后的值，之后才被真正的解绑。`}</strong></p>\n    <p>{`那么我们如何解决这个问题呢？`}</p>\n    <h3>{`使用 `}<inlineCode parentName=\"h3\">{`useLayoutEffect`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`useLayoutEffect`}</inlineCode>{` 可以看作是 `}<inlineCode parentName=\"p\">{`useEffect`}</inlineCode>{` 的同步版本。使用 `}<inlineCode parentName=\"p\">{`useLayoutEffect`}</inlineCode>{` 就可以达到我们上面说的，在同一次更新流程中解绑 `}<inlineCode parentName=\"p\">{`interval`}</inlineCode>{` 的目的。`}</p>\n    <p>{`那么同学们肯定要问了，既然 `}<inlineCode parentName=\"p\">{`useLayoutEffect`}</inlineCode>{` 可以避免这个问题，那么为什么还要用 `}<inlineCode parentName=\"p\">{`useEffect`}</inlineCode>{` 呢，直接所有地方都用 `}<inlineCode parentName=\"p\">{`useLayoutEffect`}</inlineCode>{` 不就好了。`}</p>\n    <p>{`这个呢主要是因为 `}<inlineCode parentName=\"p\">{`useLayoutEffect`}</inlineCode>{` 是同步的，如果我们要在 `}<inlineCode parentName=\"p\">{`useLayoutEffect`}</inlineCode>{` 调用状态更新，或者执行一些非常耗时的计算，可能会导致 React 运行时间过长，阻塞了浏览器的渲染，导致一些卡顿的问题。这块呢我们有机会再单独写一篇文章来分析，这里就不再赘述。`}</p>\n    <h3>{`不使用 `}<inlineCode parentName=\"h3\">{`useLayoutEffect`}</inlineCode></h3>\n    <p>{`当然我们不能因为 `}<inlineCode parentName=\"p\">{`useLayoutEffect`}</inlineCode>{` 非常方便得解决了问题所以就直接抛弃 `}<inlineCode parentName=\"p\">{`useEffect`}</inlineCode>{`，毕竟这是 React 更推荐的用法。那么我们该如何解决这个问题呢？`}</p>\n    <p>{`在解决问题之前，我们需要弄清楚问题的根本。在这个问题上，我们之前已经分析过，就是因为在我们设置了 `}<inlineCode parentName=\"p\">{`lapse`}</inlineCode>{` 之后，因为 `}<inlineCode parentName=\"p\">{`interval`}</inlineCode>{` 的再次触发，但是又设置了一次 `}<inlineCode parentName=\"p\">{`lapse`}</inlineCode>{`。`}<strong parentName=\"p\">{`那么要解决这个问题，就可以通过避免最新的那次触发，或者在触发的时候判断如果没有 `}<inlineCode parentName=\"strong\">{`running`}</inlineCode>{`，就不再设置。`}</strong></p>\n    <p>{`使用 `}<inlineCode parentName=\"p\">{`useLayoutEffect`}</inlineCode>{` 显然属于第一种方法来解决问题，那么我们接下去来讲讲第二种方法。`}</p>\n    <p>{`按照这种思路，我们第一个反应应该就是在 `}<inlineCode parentName=\"p\">{`setInterval`}</inlineCode>{` 的回调中加入判断：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"hljs language-js\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`const`}</span>{` intervalId = setInterval(`}<span parentName=\"code\" {...{\n          \"className\": \"hljs-function\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-params\"\n          }}>{`()`}</span>{` =>`}</span>{` {\n  `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`if`}</span>{` (running) {\n    setLapse(`}<span parentName=\"code\" {...{\n          \"className\": \"hljs-built_in\"\n        }}>{`Date`}</span>{`.now() - startTime)\n  }\n}, `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-number\"\n        }}>{`0`}</span>{`)`}</code></pre>\n    <p>{`但是很遗憾，这样做是不行的，因为这个回调方法保存了他的闭包，而在他的闭包里面，`}<inlineCode parentName=\"p\">{`running`}</inlineCode>{` 永远都是`}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`。那么我们是否可以通过在 `}<inlineCode parentName=\"p\">{`useEffect`}</inlineCode>{` 外部声明方法来逃过闭包呢？比如下面这样：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"hljs language-js\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"hljs-function\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-keyword\"\n          }}>{`function`}</span>{` `}<span parentName=\"span\" {...{\n            \"className\": \"hljs-title\"\n          }}>{`updateLapse`}</span>{`(`}<span parentName=\"span\" {...{\n            \"className\": \"hljs-params\"\n          }}>{`time`}</span>{`) `}</span>{`{\n  `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`if`}</span>{` (runing) {\n    setLapse(time)\n  }\n}\n\nReact.useEffect(`}<span parentName=\"code\" {...{\n          \"className\": \"hljs-function\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-params\"\n          }}>{`()`}</span>{` =>`}</span>{` {\n  `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-comment\"\n        }}>{`//...`}</span>{`\n  setInterval(`}<span parentName=\"code\" {...{\n          \"className\": \"hljs-function\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-params\"\n          }}>{`()`}</span>{` =>`}</span>{` {\n    updateLapse(`}<span parentName=\"code\" {...{\n          \"className\": \"hljs-comment\"\n        }}>{`/* ... */`}</span>{`)\n  })\n})`}</code></pre>\n    <p>{`看上去 `}<inlineCode parentName=\"p\">{`updateLapse`}</inlineCode>{` 使用的是直接外部的 `}<inlineCode parentName=\"p\">{`running`}</inlineCode>{`，所以不是 `}<inlineCode parentName=\"p\">{`setInterval`}</inlineCode>{` 回调保存的闭包来。但是可惜的是，这也是不行的。因为 `}<inlineCode parentName=\"p\">{`updateLapse`}</inlineCode>{` 也是 `}<inlineCode parentName=\"p\">{`setInterval`}</inlineCode>{` 闭包中的一部分，在这个闭包当中，`}<inlineCode parentName=\"p\">{`running`}</inlineCode>{` 永远都是一开始的值。`}</p>\n    <p>{`可能看到这里大家会有点迷糊，主要就是对于闭包的层次的不太理解，这里我就专门提出来讲解一下。`}</p>\n    <p>{`在这里我们的组件是一个函数组件，他是一个纯粹的函数，没有 `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{`，同理也就没有 `}<inlineCode parentName=\"p\">{`this.render`}</inlineCode>{` 这样的在 `}<inlineCode parentName=\"p\">{`ClassComponent`}</inlineCode>{` 中特有的函数，所以每次我们渲染函数组件的时候，我们都是要执行这个方法的，在这里我们执行 `}<inlineCode parentName=\"p\">{`Stopwatch`}</inlineCode>{`。`}</p>\n    <p>{`那么在开始执行的时候，我们就为 `}<inlineCode parentName=\"p\">{`Stopwatch`}</inlineCode>{` 创建来一个作用域，在这个作用域里面我们会声明方法，比如 `}<inlineCode parentName=\"p\">{`updateLapse`}</inlineCode>{`，他是在这次执行 `}<inlineCode parentName=\"p\">{`Stopwatch`}</inlineCode>{` 的时候才声明的，每一次执行 `}<inlineCode parentName=\"p\">{`Stopwatch`}</inlineCode>{` 的时候都会声明 `}<inlineCode parentName=\"p\">{`updateLapse`}</inlineCode>{`。同样的，`}<inlineCode parentName=\"p\">{`lapse`}</inlineCode>{` 和 `}<inlineCode parentName=\"p\">{`running`}</inlineCode>{` 也是每个作用域里单独声明的，`}<strong parentName=\"p\">{`同一次声明的变量会出于同一个闭包，不同的声明在不同的闭包。`}</strong>{`而 `}<inlineCode parentName=\"p\">{`useEffect`}</inlineCode>{` 只有在第一次渲染，或者后续 `}<inlineCode parentName=\"p\">{`running`}</inlineCode>{` 变化之后才会执行他的回调，所以对应的回调里面使用的闭包，也是每次执行的那次保存下来的。`}</p>\n    <p><strong parentName=\"p\">{`这就导致来，在一个 `}<inlineCode parentName=\"strong\">{`useEffect`}</inlineCode>{` 内部是无法获知 `}<inlineCode parentName=\"strong\">{`running`}</inlineCode>{` 的变化的，这也是 `}<inlineCode parentName=\"strong\">{`useEffct`}</inlineCode>{` 提供第二个参数的原因。`}</strong></p>\n    <p>{`那么是不是这里就无解了呢？明显不是的，这时候我们需要考虑使用 `}<inlineCode parentName=\"p\">{`useReducer`}</inlineCode>{` 来管理 `}<inlineCode parentName=\"p\">{`state`}</inlineCode></p>\n    <h3>{`逃出闭包`}</h3>\n    <p>{`我们先来看一下使用 `}<inlineCode parentName=\"p\">{`useReducer`}</inlineCode>{` 实现的代码：`}</p>\n    <iframe src=\"https://codesandbox.io/embed/l2qkmm24jz?fontsize=14&view=editor\" style={{\n      \"width\": \"100%\",\n      \"height\": \"500px\",\n      \"borderWidth\": \"0px\",\n      \"borderRadius\": \"4px\",\n      \"overflow\": \"hidden\"\n    }} sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n    <p>{`在这里我们把 `}<inlineCode parentName=\"p\">{`lapse`}</inlineCode>{` 和 `}<inlineCode parentName=\"p\">{`running`}</inlineCode>{` 放在一起，变成了一个 `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{` 对象，有点类似 Redux 的用法。在这里我们给 `}<inlineCode parentName=\"p\">{`TICK`}</inlineCode>{` action 上加了一个是否 `}<inlineCode parentName=\"p\">{`running`}</inlineCode>{` 的判断，以此来避开了在 `}<inlineCode parentName=\"p\">{`running`}</inlineCode>{` 被设置为 `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` 之后多余的 `}<inlineCode parentName=\"p\">{`lapse`}</inlineCode>{` 改变。`}</p>\n    <p>{`那么这个实现跟我们使用 `}<inlineCode parentName=\"p\">{`updateLapse`}</inlineCode>{` 的方式有什么区别呢？`}<strong parentName=\"p\">{`最大的区别是我们的 `}<inlineCode parentName=\"strong\">{`state`}</inlineCode>{` 不来自于闭包`}</strong>{`，在之前的代码中，我们在任何方法中获取 `}<inlineCode parentName=\"p\">{`lapse`}</inlineCode>{` 和 `}<inlineCode parentName=\"p\">{`running`}</inlineCode>{` 都是通过闭包，而在这里，`}<inlineCode parentName=\"p\">{`state`}</inlineCode>{` 是作为参数传入到 Reducer 中的，也就是不论何时我们调用了 `}<inlineCode parentName=\"p\">{`dispatch`}</inlineCode>{`，在 Reducer 中得到的 State 都是最新的，这就帮助我们避开了闭包的问题。`}</p>\n    <p>{`其实我们也可以通过 `}<inlineCode parentName=\"p\">{`useState`}</inlineCode>{` 来实现，原理是一样的，我们可以通过把 `}<inlineCode parentName=\"p\">{`lapse`}</inlineCode>{` 和 `}<inlineCode parentName=\"p\">{`running`}</inlineCode>{` 放在一个对象中，然后使用`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"hljs language-js\"\n      }}>{`updateState(newState) {\n  setState(`}<span parentName=\"code\" {...{\n          \"className\": \"hljs-function\"\n        }}>{`(`}<span parentName=\"span\" {...{\n            \"className\": \"hljs-params\"\n          }}>{`state`}</span>{`) =>`}</span>{` ({ ...state, newState }))\n}`}</code></pre>\n    <p>{`这样的方式来更新状态。这里最重要的就是给 `}<inlineCode parentName=\"p\">{`setState`}</inlineCode>{` 传入的是回调，这个回调会接受最新的状态，所以不需要使用闭包中的状态来进行判断。具体的代码我这边就不为大家实现来，大家可以去试一下，最终的代码应该类似下面的（没有测试过）：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"hljs language-js\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`const`}</span>{` [state, dispatch] = React.useState(stateReducer, {\n  `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-attr\"\n        }}>{`lapse`}</span>{`: `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-number\"\n        }}>{`0`}</span>{`,\n  `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-attr\"\n        }}>{`running`}</span>{`: `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-literal\"\n        }}>{`false`}</span>{`,\n})\n\n`}<span parentName=\"code\" {...{\n          \"className\": \"hljs-function\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-keyword\"\n          }}>{`function`}</span>{` `}<span parentName=\"span\" {...{\n            \"className\": \"hljs-title\"\n          }}>{`updateState`}</span>{`(`}<span parentName=\"span\" {...{\n            \"className\": \"hljs-params\"\n          }}>{`action`}</span>{`) `}</span>{`{\n  setState(`}<span parentName=\"code\" {...{\n          \"className\": \"hljs-function\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-params\"\n          }}>{`state`}</span>{` =>`}</span>{` {\n    `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`switch`}</span>{` (action.type) {\n      `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`case`}</span>{` TOGGLE:\n        `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`return`}</span>{` { ...state, `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-attr\"\n        }}>{`running`}</span>{`: !state.running }\n      `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`case`}</span>{` TICK:\n        `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`if`}</span>{` (state.running) {\n          `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`return`}</span>{` { ...state, `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-attr\"\n        }}>{`lapse`}</span>{`: action.lapse }\n        }\n        `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`return`}</span>{` state\n      `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`case`}</span>{` CLEAR:\n        `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`return`}</span>{` { `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-attr\"\n        }}>{`running`}</span>{`: `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-literal\"\n        }}>{`false`}</span>{`, `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-attr\"\n        }}>{`lapse`}</span>{`: `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-number\"\n        }}>{`0`}</span>{` }\n      `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`default`}</span>{`:\n        `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`return`}</span>{` state\n    }\n  })\n}`}</code></pre>\n    <p>{`如果有问题非常欢迎跟我讨论哦。`}</p>\n    <h3>{`总结`}</h3>\n    <p>{`相信看到这里大家应该已经有一些自己的心得了，关于 Hooks 使用上存在的一些问题，最主要的其实就是因为函数组件的特性带来的作用域和闭包问题，一旦你能够理清楚那么你就可以理解很多了。`}</p>\n    <p>{`当然我们肯定不仅仅是给大家一些建议，从这个 demo 中我们也总结出一些最佳实践：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`讲相关的 state 最好放到一个对象中进行统一管理`}</li>\n      <li parentName=\"ul\">{`使用更新方法的时候最好使用回调的方式，使用传入的状态，而不要使用闭包中的 state`}</li>\n      <li parentName=\"ul\">{`管理复杂的状态可以考虑使用`}<inlineCode parentName=\"li\">{`useReducer`}</inlineCode>{`，或者类似的方式，对状态操作定义类型，执行不同的操作。`}</li>\n    </ul>\n    <p>{`好了，以上就是这一次的分享，希望大家能收获一定的经验，避免以后在 Hooks 的使用中出现上面提到的这些问题。`}</p>\n\n    </MDXLayout>;\n}\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}