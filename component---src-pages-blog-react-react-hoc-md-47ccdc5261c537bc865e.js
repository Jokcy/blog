(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{271:function(e,a,s){"use strict";s.r(a),s.d(a,"_frontmatter",function(){return p}),s.d(a,"default",function(){return l});s(37);var n=s(29),t=s.n(n),c=(s(0),s(99)),p={title:"React HOC高阶组件详解",date:"2018-08-7",cover:"http://ww1.sinaimg.cn/large/a90af92bly1g0e2q3qzrvj20u00gwt95.jpg",description:"React 的高阶组件（HOC）是非常常用的组件逻辑拆分复用的开发模式，在 Redux、React-Router 等常见的 React 生态组件中都会用到他，学会他能够帮助我们更好得进行 React 项目开发...",tags:["react"]},b={_frontmatter:p},j="wrapper";function l(e){var a=e.components,s=t()(e,["components"]);return Object(c.b)(j,Object.assign({},b,s,{components:a,mdxType:"MDXLayout"}),Object(c.b)("p",null,"High Order Component（包装组件，后面简称 HOC），是 React 开发中提高组件复用性的高级技巧。HOC 并不是 React 的 API，他是根据 React 的特性形成的一种开发模式。"),Object(c.b)("p",null,"HOC 具体上就是一个接受组件作为参数并返回一个新的组件的方法"),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"const")," EnhancedComponent = higherOrderComponent(WrappedComponent)")),Object(c.b)("p",null,"在 React 的第三方生态中，有非常多的使用，比如 Redux 的",Object(c.b)("inlineCode",{parentName:"p"},"connect"),"方法或者 React-Router 的",Object(c.b)("inlineCode",{parentName:"p"},"withrouter"),"方法。"),Object(c.b)("h3",null,"举个例子"),Object(c.b)("p",null,"我们有两个组件："),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-jsx"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// CommentList"),"\n",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-class"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"class")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"CommentList")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"extends")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"React"),".",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"Component")," "),"{\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"constructor"),"(props) {\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"super"),"(props)\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handleChange = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handleChange.bind(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),")\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".state = {\n      ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),'// "DataSource" is some global data source'),"\n      comments: DataSource.getComments(),\n    }\n  }\n\n  componentDidMount() {\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// Subscribe to changes"),"\n    DataSource.addChangeListener(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handleChange)\n  }\n\n  componentWillUnmount() {\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// Clean up listener"),"\n    DataSource.removeChangeListener(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handleChange)\n  }\n\n  handleChange() {\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// Update component state whenever the data source changes"),"\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".setState({\n      ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-attr"}),"comments"),": DataSource.getComments(),\n    })\n  }\n\n  render() {\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," (\n      ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"<",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"div"),">"),"\n        {this.state.comments.map(comment => (\n          "),"<Comment comment={comment} key={comment.id} />\n        ))}\n      </div>",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),"\n    )\n  }\n}"))),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-jsx"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// BlogPost"),"\n",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-class"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"class")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"BlogPost")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"extends")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"React"),".",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"Component")," "),"{\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"constructor"),"(props) {\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"super"),"(props)\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handleChange = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handleChange.bind(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),")\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".state = {\n      ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-attr"}),"blogPost"),": DataSource.getBlogPost(props.id),\n    }\n  }\n\n  componentDidMount() {\n    DataSource.addChangeListener(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handleChange)\n  }\n\n  componentWillUnmount() {\n    DataSource.removeChangeListener(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handleChange)\n  }\n\n  handleChange() {\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".setState({\n      ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-attr"}),"blogPost"),": DataSource.getBlogPost(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".props.id),\n    })\n  }\n\n  render() {\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"<",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"TextBlock")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-attr"}),"text"),"=",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-string"}),"{this.state.blogPost}")," />"),"\n  }\n}"))),Object(c.b)("p",null,"他们虽然是两个不同的组件，对 DataSource 的需求也不同，但是他们有很多的内容是相似的："),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"在组件渲染之后监听 DataSource"),Object(c.b)("li",{parentName:"ul"},"在监听器里面调用 setState"),Object(c.b)("li",{parentName:"ul"},"在 unmout 的时候删除监听器")),Object(c.b)("p",null,"在大型的工程开发里面，这种相似的代码会经常出现，那么如果有办法把这些相似代码提取并复用，对工程的可维护性和开发效率可以带来明显的提升。"),Object(c.b)("p",null,"使用 HOC 我们可以提供一个方法，并接受不了组件和一些组件间的区别配置作为参数，然后返回一个包装过的组件作为结果。"),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-jsx"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-function"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"function")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"withSubscription"),"(",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-params"}),"WrappedComponent, selectData"),") "),"{\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// ...and returns another component..."),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-class"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"class")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"extends")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"React"),".",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"Component")," "),"{\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"constructor"),"(props) {\n      ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"super"),"(props)\n      ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handleChange = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handleChange.bind(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),")\n      ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".state = {\n        ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-attr"}),"data"),": selectData(DataSource, props),\n      }\n    }\n\n    componentDidMount() {\n      ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// ... that takes care of the subscription..."),"\n      DataSource.addChangeListener(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handleChange)\n    }\n\n    componentWillUnmount() {\n      DataSource.removeChangeListener(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handleChange)\n    }\n\n    handleChange() {\n      ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".setState({\n        ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-attr"}),"data"),": selectData(DataSource, ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".props),\n      })\n    }\n\n    render() {\n      ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// ... and renders the wrapped component with the fresh data!"),"\n      ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// Notice that we pass through any additional props"),"\n      ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"<",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"WrappedComponent")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-attr"}),"data"),"=",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-string"}),"{this.state.data}")," {",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-attr"}),"...this.props"),"} />"),"\n    }\n  }\n}"))),Object(c.b)("p",null,"然后我们就可以通过简单的调用该方法来包装组件："),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-jsx"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"const")," CommentListWithSubscription = withSubscription(CommentList, DataSource =>\n  DataSource.getComments()\n)\n\n",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"const")," BlogPostWithSubscription = withSubscription(\n  BlogPost,\n  (DataSource, props) => DataSource.getBlogPost(props.id)\n)")),Object(c.b)("p",null,"注意：在 HOC 中我们并没有修改输入的组件，也没有通过继承来扩展组件。HOC 是通过组合的方式来达到扩展组件的目的，一个 HOC 应该是一个没有副作用的方法。"),Object(c.b)("p",null,"在这个例子中我们把两个组件相似的生命周期方法提取出来，并提供 selectData 作为参数让输入组件可以选择自己想要的数据。因为 withSubscription 是个纯粹的方法，所以以后如果有相似的组件，都可以通过该方法进行包装，能够节省非常多的重复代码。"),Object(c.b)("h3",null,"不要修改原始组件，使用组合进行功能扩展"),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-jsx"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-function"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"function")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"logProps"),"(",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-params"}),"InputComponent"),") "),"{\n  InputComponent.prototype.componentWillReceiveProps = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-function"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"function"),"(",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-params"}),"nextProps"),") "),"{\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-built_in"}),"console"),".log(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-string"}),"'Current props: '"),", ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".props)\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-built_in"}),"console"),".log(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-string"}),"'Next props: '"),", nextProps)\n  }\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// The fact that we're returning the original input is a hint that it has"),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// been mutated."),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," InputComponent\n}\n\n",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// EnhancedComponent will log whenever props are received"),"\n",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"const")," EnhancedComponent = logProps(InputComponent)")),Object(c.b)("p",null,"通过以上方式我们也可以达到扩展组件的效果，但是会存在一些问题"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"如果 InputComponent 本身也有",Object(c.b)("inlineCode",{parentName:"li"},"componentWillReceiveProps"),"生命周期方法，那么就会被覆盖"),Object(c.b)("li",{parentName:"ul"},"functional component 不适用，因为他根本不存在生命周期方法")),Object(c.b)("p",null,"修改原始组件的方式缺乏抽象化，使用者必须知道这个方法是如何实现的来避免上面提到的问题。"),Object(c.b)("p",null,"如果通过组合的方式来做，我们就可以避免这些问题"),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-jsx"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-function"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"function")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"logProps"),"(",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-params"}),"InputComponent"),") "),"{\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-class"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"class")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"extends")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"React"),".",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"Component")," "),"{\n    componentWillReceiveProps(nextProps) {\n      ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-built_in"}),"console"),".log(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-string"}),"'Current props: '"),", ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".props)\n      ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-built_in"}),"console"),".log(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-string"}),"'Next props: '"),", nextProps)\n    }\n    render() {\n      ;",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"<",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"InputComponent")," {",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-attr"}),"...this.props"),"} />"),"\n    }\n  }\n}\n\n// EnhancedComponent will log whenever props are received\nconst EnhancedComponent = logProps(InputComponent)"))),Object(c.b)("h3",null,"惯例：无关的 props 传入到原始组件"),Object(c.b)("p",null,"HOC 组件会在原始组件的基础上增加一些扩展功能使用的 props，那么这些 props 就不应该传入到原始组件（当然有例外，比如 HOC 组件需要使用原始组件指定的 props），一般来说我们会这样处理 props："),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-jsx"}),"render() {\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// Filter out extra props that are specific to this HOC and shouldn't be"),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// passed through"),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"const")," { extraProp, ...passThroughProps } = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".props;\n\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// Inject props into the wrapped component. These are usually state values or"),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// instance methods."),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"const")," injectedProp = someStateOrInstanceMethod;\n\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// Pass props to wrapped component"),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," (\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"<",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"WrappedComponent"),"\n      ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-attr"}),"injectedProp"),"=",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-string"}),"{injectedProp}"),"\n      {",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-attr"}),"...passThroughProps"),"}\n    />"),"\n  );\n}"))),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"extraProp"),"是 HOC 组件中要用的 props，不用的剩下的 props 我们都认为是原始组件需要使用的 props，如果是两者通用的 props 你可以单独传递。"),Object(c.b)("h3",null,"惯例：包装组件的显示名称来方便调试"),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-jsx"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-function"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"function")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"withSubscription"),"(",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-params"}),"WrappedComponent"),") "),"{\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-class"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"class")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"WithSubscription")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"extends")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"React"),".",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"Component")," "),"{\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"/* ... */"),"\n  }\n  WithSubscription.displayName = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-string"}),"`WithSubscription(",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-subst"}),"${getDisplayName(\n    WrappedComponent\n  )}"),")`"),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," WithSubscription\n}\n\n",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-function"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"function")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"getDisplayName"),"(",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-params"}),"WrappedComponent"),") "),"{\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," WrappedComponent.displayName || WrappedComponent.name || ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-string"}),"'Component'"),"\n}")),Object(c.b)("p",null,"简单来说就是通过手动指定",Object(c.b)("inlineCode",{parentName:"p"},"displayName"),"来让 HOC 组件能够更方便得被 react devtool 观察到"),Object(c.b)("h3",null,"惯例：不要在 render 方法里面调用 HOC 方法"),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-jsx"}),"render() {\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// A new version of EnhancedComponent is created on every render"),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// EnhancedComponent1 !== EnhancedComponent2"),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"const")," EnhancedComponent = enhance(MyComponent);\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// That causes the entire subtree to unmount/remount each time!"),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"<",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"EnhancedComponent")," />"),";\n}"))),Object(c.b)("p",null,"一来每次调用",Object(c.b)("inlineCode",{parentName:"p"},"enhance"),"返回的都是一个新的 class，react 的 diffing 算法是根据组件的特征来判断是否需要重新渲染的，如果两次 render 的时候组件之间不是(===)完全相等的，那么会直接重新渲染，而部署根据 props 传入之后再进行 diff，对性能损耗非常大。并且重新渲染会让之前的组件的 state 和 children 全部丢失。"),Object(c.b)("p",null,"二来 React 的组件是通过 props 来改变其显示的，完全没有必要每次渲染动态产生一个组件，理论上需要在渲染时自定义的参数，都可以通过事先指定好 props 来实现可配置。"),Object(c.b)("h3",null,"静态方法必须被拷贝"),Object(c.b)("p",null,"有时候会在组件的 class 上面外挂一下帮助方法，如果按照上面的方法进行包装，那么包装之后的 class 就没有来这些静态方法，这时候为了保持组件使用的一致性，一般我们会把这些静态方法拷贝到包装后的组件上。"),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-jsx"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-function"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"function")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"enhance"),"(",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-params"}),"WrappedComponent"),") "),"{\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-class"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"class")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"Enhance")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"extends")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"React"),".",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"Component")," "),"{\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"/*...*/"),"\n  }\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// Must know exactly which method(s) to copy :("),"\n  Enhance.staticMethod = WrappedComponent.staticMethod\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," Enhance\n}")),Object(c.b)("p",null,"这个之适用于你已知输入组件存在那些静态方法的情况，如果需要可扩展性更高，那么可以选择使用第三方插件",Object(c.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/mridgway/hoist-non-react-statics#readme"}),Object(c.b)("inlineCode",{parentName:"a"},"hoist-non-react-statics"))),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-jsx"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"import")," hoistNonReactStatic ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"from")," ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-string"}),"'hoist-non-react-statics'"),"\n",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-function"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"function")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"enhance"),"(",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-params"}),"WrappedComponent"),") "),"{\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-class"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"class")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"Enhance")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"extends")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"React"),".",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"Component")," "),"{\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"/*...*/"),"\n  }\n  hoistNonReactStatic(Enhance, WrappedComponent)\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," Enhance\n}")),Object(c.b)("h3",null,"ref"),Object(c.b)("p",null,"ref 作为 React 中的特殊属性--类似于 key，并不属于 props，也就是说我们使用传递 props 的方式并不会把 ref 传递进去，那么这时候如果我们在 HOC 组件上放一个 ref，拿到的是包装之后的组件而不是原始组件，这可能就会导致一些问题。"),Object(c.b)("p",null,"在 React 16.3 之后官方增加来一个",Object(c.b)("inlineCode",{parentName:"p"},"React.forwardRef"),"方法来解决这个问题，具体可以参考",Object(c.b)("a",Object.assign({parentName:"p"},{href:"https://reactjs.org/docs/forwarding-refs.html"}),"这里")))}l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-blog-react-react-hoc-md-47ccdc5261c537bc865e.js.map