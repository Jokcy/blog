(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{272:function(e,a,n){"use strict";n.r(a),n.d(a,"_frontmatter",function(){return b}),n.d(a,"default",function(){return j});n(37);var t=n(29),s=n.n(t),c=(n(0),n(99)),b={title:"阅读源码后，来讲讲React Hooks是怎么实现的",date:"2018-10-10",cover:"https://user-gold-cdn.xitu.io/2018/11/5/166e20d92aa52108?imageView2/2/w/480/h/480/q/85/interlace/1",description:"什么是 React Hooks，他解决了什么问题，又带来了哪些好处，他跟 ClassComponent 直接的区别和联系又是什么，让我来为你解答 Hooks 相关的问题...",tags:["react"]},p={_frontmatter:b},l="wrapper";function j(e){var a=e.components,n=s()(e,["components"]);return Object(c.b)(l,Object.assign({},p,n,{components:a,mdxType:"MDXLayout"}),Object(c.b)("p",null,"React 16.7-alpha 中新增了新功能：",Object(c.b)("inlineCode",{parentName:"p"},"Hooks"),"。总结他的功能就是：让",Object(c.b)("inlineCode",{parentName:"p"},"FunctionalComponent"),"具有",Object(c.b)("inlineCode",{parentName:"p"},"ClassComponent"),"的功能。"),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"import")," React, { useState, useEffect } ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"from")," ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-string"}),"'react'"),"\n\n",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-function"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"function")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"FunComp"),"(",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-params"}),"props"),") "),"{\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"const")," [data, setData] = useState(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-string"}),"'initialState'"),")\n\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-function"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"function")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"handleChange"),"(",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-params"}),"e"),") "),"{\n    setData(e.target.value)\n  }\n\n  useEffect(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-function"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-params"}),"()")," =>")," {\n    subscribeToSomething()\n\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-function"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-params"}),"()")," =>")," {\n      unSubscribeToSomething()\n    }\n  })\n\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"<",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"input")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-attr"}),"value"),"=",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-string"}),"{data}")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-attr"}),"onChange"),"=",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-string"}),"{handleChange}")," />"),"\n}"))),Object(c.b)("p",null,"按照",Object(c.b)("em",{parentName:"p"},"Dan"),"的说法，设计",Object(c.b)("inlineCode",{parentName:"p"},"Hooks"),"主要是解决",Object(c.b)("inlineCode",{parentName:"p"},"ClassComponent"),"的几个问题："),Object(c.b)("ol",null,Object(c.b)("li",{parentName:"ol"},"很难复用逻辑（只能用 HOC，或者 render props），会导致组件树层级很深"),Object(c.b)("li",{parentName:"ol"},"会产生巨大的组件（指很多代码必须写在类里面）"),Object(c.b)("li",{parentName:"ol"},"类组件很难理解，比如方法需要",Object(c.b)("inlineCode",{parentName:"li"},"bind"),"，",Object(c.b)("inlineCode",{parentName:"li"},"this"),"指向不明确")),Object(c.b)("p",null,"这些确实是存在的问题，比如我们如果用了",Object(c.b)("inlineCode",{parentName:"p"},"react-router"),"+",Object(c.b)("inlineCode",{parentName:"p"},"redux"),"+",Object(c.b)("inlineCode",{parentName:"p"},"material-ui"),"，很可能随便一个组件最后",Object(c.b)("inlineCode",{parentName:"p"},"export"),"出去的代码是酱紫的："),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"export")," ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"default")," withStyle(style)(connect(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"/*something*/"),")(withRouter(MyComponent)))")),Object(c.b)("p",null,"这就是一个 4 层嵌套的",Object(c.b)("inlineCode",{parentName:"p"},"HOC"),"组件"),Object(c.b)("p",null,"同时，如果你的组件内事件多，那么你的",Object(c.b)("inlineCode",{parentName:"p"},"constructor"),"里面可能会酱紫："),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-class"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"class")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"MyComponent")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"extends")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"React"),".",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"Component")," "),"{\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"constructor"),"() {\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// initiallize"),"\n\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handler1 = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handler1.bind(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),")\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handler2 = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handler2.bind(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),")\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handler3 = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handler3.bind(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),")\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handler4 = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handler4.bind(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),")\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handler5 = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".handler5.bind(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),")\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// ...more"),"\n  }\n}")),Object(c.b)("p",null,"虽然最新的",Object(c.b)("inlineCode",{parentName:"p"},"class"),"语法可以用",Object(c.b)("inlineCode",{parentName:"p"},"handler = () => {}"),"来快捷绑定，但也就解决了一个声明的问题，整体的复杂度还是在的。"),Object(c.b)("p",null,"然后还有在",Object(c.b)("inlineCode",{parentName:"p"},"componentDidMount"),"和",Object(c.b)("inlineCode",{parentName:"p"},"componentDidUpdate"),"中订阅内容，还需要在",Object(c.b)("inlineCode",{parentName:"p"},"componentWillUnmount"),"中取消订阅的代码，里面会存在很多重复性工作。最重要的是，在一个",Object(c.b)("inlineCode",{parentName:"p"},"ClassComponent"),"中的生命周期方法中的代码，是很难在其他组件中复用的，这就导致了了代码复用率低的问题。"),Object(c.b)("p",null,"还有就是",Object(c.b)("inlineCode",{parentName:"p"},"class"),"代码对于打包工具来说，很难被压缩，比如方法名称。"),Object(c.b)("p",null,"更多详细的大家可以去看",Object(c.b)("a",Object.assign({parentName:"p"},{href:"https://www.youtube.com/watch?v=V-QO-KO90iQ&t=3060s"}),Object(c.b)("inlineCode",{parentName:"a"},"ReactConf"),"的视频"),"，我这里就不多讲了，",Object(c.b)("strong",{parentName:"p"},"这篇文章的主题是从源码的角度讲讲",Object(c.b)("inlineCode",{parentName:"strong"},"Hooks"),"是如何实现的")),Object(c.b)("h3",null,"先来了解一些基础概念"),Object(c.b)("p",null,"首先",Object(c.b)("inlineCode",{parentName:"p"},"useState"),"是一个方法，它本身是无法存储状态的"),Object(c.b)("p",null,"其次，他运行在",Object(c.b)("inlineCode",{parentName:"p"},"FunctionalComponent"),"里面，本身也是无法保存状态的"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"useState"),"只接收一个参数",Object(c.b)("inlineCode",{parentName:"p"},"initial value"),"，并看不出有什么特殊的地方。所以 React 在一次重新渲染的时候如何获取之前更新过的",Object(c.b)("inlineCode",{parentName:"p"},"state"),"呢？"),Object(c.b)("p",null,"在开始讲解源码之前，大家先要建立一些概念："),Object(c.b)("h6",null,"React Element"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"JSX"),"翻译过来之后是",Object(c.b)("inlineCode",{parentName:"p"},"React.createElement"),"，他最终返回的是一个",Object(c.b)("inlineCode",{parentName:"p"},"ReactElement"),"对象，他的数据解构如下："),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"const")," element = {\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-attr"}),"$$typeof"),": REACT_ELEMENT_TYPE, ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// 是否是普通Element_Type"),"\n\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// Built-in properties that belong on the element"),"\n  type: type, ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// 我们的组件，比如`class MyComponent`"),"\n  key: key,\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-attr"}),"ref"),": ref,\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-attr"}),"props"),": props,\n\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// Record the component responsible for creating this element."),"\n  _owner: owner,\n}")),Object(c.b)("p",null,"这其中需要注意的是",Object(c.b)("inlineCode",{parentName:"p"},"type"),"，在我们写",Object(c.b)("inlineCode",{parentName:"p"},"<MyClassComponent {...props} />"),"的时候，他的值就是",Object(c.b)("inlineCode",{parentName:"p"},"MyClassComponent"),"这个",Object(c.b)("inlineCode",{parentName:"p"},"class"),"，而不是他的实例，实例是在后续渲染的过程中创建的。"),Object(c.b)("h6",null,"Fiber"),Object(c.b)("p",null,"每个节点都会有一个对应的",Object(c.b)("inlineCode",{parentName:"p"},"Fiber"),"对象，他的数据解构如下："),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-function"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"function")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"FiberNode"),"(",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-params"}),"\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n"),") "),"{\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// Instance"),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".tag = tag\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".key = key\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".elementType = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-literal"}),"null")," ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// 就是ReactElement的`$$typeof`"),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".type = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-literal"}),"null")," ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// 就是ReactElement的type"),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".stateNode = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-literal"}),"null"),"\n\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// Fiber"),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".return = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-literal"}),"null"),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".child = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-literal"}),"null"),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".sibling = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-literal"}),"null"),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".index = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-number"}),"0"),"\n\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".ref = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-literal"}),"null"),"\n\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".pendingProps = pendingProps\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".memoizedProps = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-literal"}),"null"),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".updateQueue = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-literal"}),"null"),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".memoizedState = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-literal"}),"null"),"\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"this"),".firstContextDependency = ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-literal"}),"null"),"\n\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// ...others"),"\n}")),Object(c.b)("p",null,"在这里我们需要注意的是",Object(c.b)("inlineCode",{parentName:"p"},"this.memoizedState"),"，这个",Object(c.b)("inlineCode",{parentName:"p"},"key"),"就是用来存储在上次渲染过程中最终获得的节点的",Object(c.b)("inlineCode",{parentName:"p"},"state"),"的，每次执行",Object(c.b)("inlineCode",{parentName:"p"},"render"),"方法之前，React 会计算出当前组件最新的",Object(c.b)("inlineCode",{parentName:"p"},"state"),"然后赋值给",Object(c.b)("inlineCode",{parentName:"p"},"class"),"的实例，再调用",Object(c.b)("inlineCode",{parentName:"p"},"render"),"。"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"所以很多不是很清楚 React 原理的同学会对 React 的",Object(c.b)("inlineCode",{parentName:"strong"},"ClassComponent"),"有误解，认为",Object(c.b)("inlineCode",{parentName:"strong"},"state"),"和",Object(c.b)("inlineCode",{parentName:"strong"},"lifeCycle"),"都是自己主动调用的，因为我们继承了",Object(c.b)("inlineCode",{parentName:"strong"},"React.Component"),"，它里面肯定有很多相关逻辑。事实上如果有兴趣可以去看一下",Object(c.b)("inlineCode",{parentName:"strong"},"Component"),"的源码，大概也就是 100 多行，非常简单。所以在 React 中，",Object(c.b)("inlineCode",{parentName:"strong"},"class"),"仅仅是一个载体，让我们写组件的时候更容易理解一点，毕竟组件和",Object(c.b)("inlineCode",{parentName:"strong"},"class"),"都是封闭性较强的")),Object(c.b)("h3",null,"原理"),Object(c.b)("p",null,"在知道上面的基础之后，对于",Object(c.b)("inlineCode",{parentName:"p"},"Hooks"),"为什么能够保存无状态组件的原理就比较好理解了。"),Object(c.b)("p",null,"我们假设有这么一段代码："),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-function"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"function")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"FunctionalComponent"),"(",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-params"})),") "),"{\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"const")," [state1, setState1] = useState(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-number"}),"1"),")\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"const")," [state2, setState2] = useState(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-number"}),"2"),")\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"const")," [state3, setState3] = useState(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-number"}),"3"),")\n}")),Object(c.b)("p",null,"先来看一张图"),Object(c.b)("p",null,Object(c.b)("img",Object.assign({parentName:"p"},{src:"https://user-gold-cdn.xitu.io/2018/11/5/166e20d92aa52108?imageView2/2/w/480/h/480/q/85/interlace/1",alt:"react-hooks"}))),Object(c.b)("p",null,"在我们执行",Object(c.b)("inlineCode",{parentName:"p"},"functionalComponent"),"的时候，在第一次执行到",Object(c.b)("inlineCode",{parentName:"p"},"useState"),"的时候，他会对应",Object(c.b)("inlineCode",{parentName:"p"},"Fiber"),"对象上的",Object(c.b)("inlineCode",{parentName:"p"},"memoizedState"),"，这个属性原来设计来是用来存储",Object(c.b)("inlineCode",{parentName:"p"},"ClassComponent"),"的",Object(c.b)("inlineCode",{parentName:"p"},"state"),"的，因为在",Object(c.b)("inlineCode",{parentName:"p"},"ClassComponent"),"中",Object(c.b)("inlineCode",{parentName:"p"},"state"),"是一整个对象，所以可以和",Object(c.b)("inlineCode",{parentName:"p"},"memoizedState"),"一一对应。"),Object(c.b)("p",null,"但是在",Object(c.b)("inlineCode",{parentName:"p"},"Hooks"),"中，React 并不知道我们调用了几次",Object(c.b)("inlineCode",{parentName:"p"},"useState"),"，所以在保存",Object(c.b)("inlineCode",{parentName:"p"},"state"),"这件事情上，React 想出了一个比较有意思的方案，那就是调用",Object(c.b)("inlineCode",{parentName:"p"},"useState"),"后设置在",Object(c.b)("inlineCode",{parentName:"p"},"memoizedState"),"上的对象长这样："),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),"{\n  baseState, next, baseUpdate, queue, memoizedState\n}")),Object(c.b)("p",null,"我们叫他",Object(c.b)("em",{parentName:"p"},"Hook"),"对象。这里面我们最需要关心的是",Object(c.b)("inlineCode",{parentName:"p"},"memoizedState"),"和",Object(c.b)("inlineCode",{parentName:"p"},"next"),"，",Object(c.b)("inlineCode",{parentName:"p"},"memoizedState"),"是用来记录这个",Object(c.b)("inlineCode",{parentName:"p"},"useState"),"应该返回的结果的，而",Object(c.b)("inlineCode",{parentName:"p"},"next"),"指向的是下一次",Object(c.b)("inlineCode",{parentName:"p"},"useState"),"对应的`Hook 对象。"),Object(c.b)("p",null,"也就是说："),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),"hook1 => Fiber.memoizedState\nstate1 === hook1.memoizedState\nhook1.next => hook2\nstate2 === hook2.memoizedState\nhook2.next => hook3\nstate3 === hook2.memoizedState")),Object(c.b)("p",null,"每个在",Object(c.b)("inlineCode",{parentName:"p"},"FunctionalComponent"),"中调用的",Object(c.b)("inlineCode",{parentName:"p"},"useState"),"都会有一个对应的",Object(c.b)("inlineCode",{parentName:"p"},"Hook"),"对象，他们按照执行的顺序以类似链表的数据格式存放在",Object(c.b)("inlineCode",{parentName:"p"},"Fiber.memoizedState"),"上"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"重点来了：就是因为是以这种方式进行",Object(c.b)("inlineCode",{parentName:"strong"},"state"),"的存储，所以",Object(c.b)("inlineCode",{parentName:"strong"},"useState"),"（包括其他的 Hooks）都必须在",Object(c.b)("inlineCode",{parentName:"strong"},"FunctionalComponent"),"的根作用域中声明，也就是不能在",Object(c.b)("inlineCode",{parentName:"strong"},"if"),"或者循环中声明，比如")),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"if")," (something) {\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"const")," [state1] = useState(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-number"}),"1"),")\n}\n\n",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// or"),"\n\n",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"for")," (something) {\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"const")," [state2] = useState(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-number"}),"2"),")\n}")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"最主要的原因就是你不能确保这些条件语句每次执行的次数是一样的"),"，也就是说如果第一次我们创建了",Object(c.b)("inlineCode",{parentName:"p"},"state1 => hook1, state2 => hook2, state3 => hook3"),"这样的对应关系之后，下一次执行因为",Object(c.b)("inlineCode",{parentName:"p"},"something"),"条件没达成，导致",Object(c.b)("inlineCode",{parentName:"p"},"useState(1)"),"没有执行，那么运行",Object(c.b)("inlineCode",{parentName:"p"},"useState(2)"),"的时候，拿到的",Object(c.b)("inlineCode",{parentName:"p"},"hook"),"对象是",Object(c.b)("inlineCode",{parentName:"p"},"state1"),"的，那么整个逻辑就乱套了，",Object(c.b)("strong",{parentName:"p"},"所以这个条件是必须要遵守的！")),Object(c.b)("h3",null,"setState"),Object(c.b)("p",null,"上面讲了",Object(c.b)("inlineCode",{parentName:"p"},"Hooks"),"中",Object(c.b)("inlineCode",{parentName:"p"},"state"),"是如何保存的，那么接下去来讲讲如何更新",Object(c.b)("inlineCode",{parentName:"p"},"state")),Object(c.b)("p",null,"我们调用的调用",Object(c.b)("inlineCode",{parentName:"p"},"useState"),"返回的方法是酱紫的："),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"var")," dispatch = (queue.dispatch = dispatchAction.bind(\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-literal"}),"null"),",\n  currentlyRenderingFiber$",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-number"}),"1"),",\n  queue,\n))\n",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," [workInProgressHook.memoizedState, dispatch]")),Object(c.b)("p",null,"调用这个方法会创建一个",Object(c.b)("inlineCode",{parentName:"p"},"update")),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"var")," update = {\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-attr"}),"expirationTime"),": _expirationTime,\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-attr"}),"action"),": action,\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-attr"}),"callback"),": callback !== ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-literal"}),"undefined")," ? callback : ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-literal"}),"null"),",\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-attr"}),"next"),": ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-literal"}),"null"),",\n}")),Object(c.b)("p",null,"这里的",Object(c.b)("inlineCode",{parentName:"p"},"action"),"是我们调用",Object(c.b)("inlineCode",{parentName:"p"},"setState1"),"传入的值，而这个",Object(c.b)("inlineCode",{parentName:"p"},"update"),"会被加入到",Object(c.b)("inlineCode",{parentName:"p"},"queue"),"上，因为可能存在一次性调用多次",Object(c.b)("inlineCode",{parentName:"p"},"setState1"),"的清空（跟 React 的 batchUpdate 有关，以后有机会讲。）"),Object(c.b)("p",null,"在收集完这所有",Object(c.b)("inlineCode",{parentName:"p"},"update"),"之后，会调度一次",Object(c.b)("inlineCode",{parentName:"p"},"React"),"的更新，在更新的过程中，肯定会执行到我们的",Object(c.b)("inlineCode",{parentName:"p"},"FunctionalComponent"),"，那么就会执行到对应的",Object(c.b)("inlineCode",{parentName:"p"},"useState"),"，然后我们就拿到了",Object(c.b)("inlineCode",{parentName:"p"},"Hook"),"对象，他保存了",Object(c.b)("inlineCode",{parentName:"p"},"queue"),"对象表示有哪些更新存在，然后依次进行更新，拿到最新的",Object(c.b)("inlineCode",{parentName:"p"},"state"),"保存在",Object(c.b)("inlineCode",{parentName:"p"},"memoizedState"),"上，并且返回，最终达到了",Object(c.b)("inlineCode",{parentName:"p"},"setState"),"的效果。"),Object(c.b)("h3",null,"总结"),Object(c.b)("p",null,"其实本质上跟",Object(c.b)("inlineCode",{parentName:"p"},"ClassComponent"),"是差不多的，只不过因为",Object(c.b)("inlineCode",{parentName:"p"},"useState"),"拆分了单一对象",Object(c.b)("inlineCode",{parentName:"p"},"state"),"，所以要用一个相对独特的方式进行数据保存，而且会存在一定的规则限制。"),Object(c.b)("p",null,"但是这些条件完全不能掩盖",Object(c.b)("inlineCode",{parentName:"p"},"Hooks"),"的光芒，他的意义是在是太大了，让",Object(c.b)("inlineCode",{parentName:"p"},"React"),"这个 ",Object(c.b)("strong",{parentName:"p"},"函数式编程"),"范式的框架终于摆脱了要用类来创建组件的尴尬场面。事实上类的存在意义确实不大，比如",Object(c.b)("inlineCode",{parentName:"p"},"PuerComponent"),"现在也有对应的",Object(c.b)("inlineCode",{parentName:"p"},"React.memo"),"来让函数组件也能达到相同的效果。"),Object(c.b)("p",null,"最后，因为真的要把源码摊开来讲，就会涉及到一些其他的源码内容，比如",Object(c.b)("inlineCode",{parentName:"p"},"workInProgress => current"),"的转换，",Object(c.b)("inlineCode",{parentName:"p"},"expirationTime"),"涉及的调度等，反而会导致大家无法理解本篇文章的主体",Object(c.b)("inlineCode",{parentName:"p"},"Hooks"),"，所以我在写完完整源码解析后又总结归纳了这篇文章来单独发布。希望能帮助各位童鞋更好得理解",Object(c.b)("inlineCode",{parentName:"p"},"Hooks"),"，并能大胆用到实际开发中去。"),Object(c.b)("p",null,"因为：真的很好用啊！！！"),Object(c.b)("h1",null,"注意"),Object(c.b)("p",null,"目前",Object(c.b)("inlineCode",{parentName:"p"},"react-hot-loader"),"不能和",Object(c.b)("inlineCode",{parentName:"p"},"hooks"),"一起使用，",Object(c.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/gaearon/react-hot-loader/issues/1088"}),"详情"),"，所以你可以考虑等到正式版再用。"))}j.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-blog-react-the-principle-of-react-hooks-md-66cb2abcbc4da0b18491.js.map