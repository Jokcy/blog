(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{263:function(e,a,n){"use strict";n.r(a),n.d(a,"_frontmatter",function(){return b}),n.d(a,"default",function(){return j});n(37);var s=n(29),t=n.n(s),c=(n(0),n(99)),b={title:"React组件化复用的一些技巧",date:"2019-02-17",cover:"http://ww1.sinaimg.cn/large/a90af92bly1g0hh3u7v16j20go0b4q37.jpg",description:"React 中有一个非常不常用的 API 叫做 cloneElement，百分之80的同学可能都没用过，但是在处理组件复用的过程中，这个 API 却可以帮组我们完成非常多有用的工作",tags:["react"]},p={_frontmatter:b},l="wrapper";function j(e){var a=e.components,n=t()(e,["components"]);return Object(c.b)(l,Object.assign({},p,n,{components:a,mdxType:"MDXLayout"}),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"复用是组件化开发体系的立命之本，可以说组件化的初衷就是为了复用性。但是组件化的复用方式也存在一定的问题，其中拆分粒度就是其中一个绕不开的话题，今天咱们就来讲一讲 React 当中的一个不太常用的 API：",Object(c.b)("inlineCode",{parentName:"p"},"cloneElement"),"，他如何帮组我们更好得进行组件拆分。")),Object(c.b)("p",null,"假如我们有一个",Object(c.b)("inlineCode",{parentName:"p"},"Layout"),"组件，那么一般来说这个组件主要接收的就是",Object(c.b)("inlineCode",{parentName:"p"},"children"),"，把它放在主要内容的部分，然后组件本身的节点来控制布局，那么这个时候如果我们这个布局包含两个部分呢，比如还有一个",Object(c.b)("inlineCode",{parentName:"p"},"header"),"部分，是跟主要内容有明显区分的。"),Object(c.b)("p",null,"比如："),Object(c.b)("p",null,Object(c.b)("img",Object.assign({parentName:"p"},{src:"http://ww1.sinaimg.cn/large/a90af92bly1g0hh3u7v16j20go0b4q37.jpg",alt:"layout"}))),Object(c.b)("p",null,"那么我们这个时候会如何设计这个组件呢？"),Object(c.b)("h3",null,"版本一"),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-function"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"function")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"Layout"),"(",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-params"}),"{ header: Header, children }"),") "),"{\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," (\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"<",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"div")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-attr"}),"className"),"=",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-string"}),"'container'"),">"),"\n      "),"<div className='header'>\n        <Header />\n      </div>",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),"\n      "),"<div classNmae='content'>{children}</div>",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),"\n    ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"</",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"div"),">")),"\n  )\n}")),Object(c.b)("p",null,"这应该是我们比较常见的方式，我们通过把具体组件作为",Object(c.b)("inlineCode",{parentName:"p"},"Layout"),"的",Object(c.b)("inlineCode",{parentName:"p"},"props"),"传入进来，然后按照组件的写法把它写入到组件渲染内容之中。"),Object(c.b)("p",null,"我们想要使用这个组件，一般会像下面这样："),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-function"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"function")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"Header"),"(",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-params"})),") "),"{\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"<",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"h1"),">"),"Title Here",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"</",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"h1"),">")),"\n}\n\n;",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"<",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"Layout")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-attr"}),"header"),"=",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-string"}),"{Header}"),">"),"\n  "),"<div>content here</div>",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),"\n",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"</",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"Layout"),">")))),Object(c.b)("p",null,"那么这样做有什么问题呢？显然是有的，最明显的就是无法在使用",Object(c.b)("inlineCode",{parentName:"p"},"Header"),"的时候指定",Object(c.b)("inlineCode",{parentName:"p"},"props")),Object(c.b)("p",null,"如果",Object(c.b)("inlineCode",{parentName:"p"},"Header"),"有",Object(c.b)("inlineCode",{parentName:"p"},"props"),"，那么就我们只能硬编码在",Object(c.b)("inlineCode",{parentName:"p"},"Layout"),"里面，不能在使用",Object(c.b)("inlineCode",{parentName:"p"},"Header"),"组件的地方进行声明，所以如果我们想要复用一个",Object(c.b)("inlineCode",{parentName:"p"},"Header"),"组件，我们可能需要再声明一个组件，比如我们给",Object(c.b)("inlineCode",{parentName:"p"},"Header"),"组件一个叫做",Object(c.b)("inlineCode",{parentName:"p"},"message"),"的",Object(c.b)("inlineCode",{parentName:"p"},"prop"),"用来指定显示的文字内容"),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-function"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"function")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"Header"),"(",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-params"}),"{ message = ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-string"}),"'Title Here'")," }"),") "),"{\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"<",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"h1"),">"),"{message}",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"</",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"h1"),">")),"\n}")),Object(c.b)("p",null,"那么如果我们想要在不同页面复用这个组件并且显示不同的标题，我们需要这么做："),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-function"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"function")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"BigHeader"),"(",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-params"})),") "),"{\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"<",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"Header")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-attr"}),"message"),"=",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-string"}),"'The Other Title'")," />"),"\n}"))),Object(c.b)("p",null,"这么做显然在组件较为复杂而且",Object(c.b)("inlineCode",{parentName:"p"},"props"),"较多的情况下，也可以达到一定的复用效果，但是追求极致的我们肯定不希望仅仅局限于此。"),Object(c.b)("h3",null,"第二版"),Object(c.b)("p",null,"那么有没有办法让我们可以在使用时能指定",Object(c.b)("inlineCode",{parentName:"p"},"props"),"呢？答案肯定是有的，我们可以将",Object(c.b)("inlineCode",{parentName:"p"},"Layout"),"的",Object(c.b)("inlineCode",{parentName:"p"},"header"),"这个",Object(c.b)("inlineCode",{parentName:"p"},"prop"),"接收的不是组件本体，而是具体的",Object(c.b)("inlineCode",{parentName:"p"},"ReactElement"),"。"),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-function"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"function")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"Layout"),"(",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-params"}),"{ header, children }"),") "),"{\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," (\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"<",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"div")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-attr"}),"className"),"=",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-string"}),"'container'"),">"),"\n      "),"<div className='header'>{header}</div>",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),"\n      "),"<div classNmae='content'>{children}</div>",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),"\n    ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"</",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"div"),">")),"\n  )\n}")),Object(c.b)("p",null,"那么我们在使用的时候就可以非常方便得指定",Object(c.b)("inlineCode",{parentName:"p"},"props")),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),"<Layout header={<Header message=",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-string"}),"'The Other Title'")," />}>\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"<",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"div"),">"),"Content Here",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"</",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"div"),">")),"\n",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"</",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"Layout"),">")))),Object(c.b)("p",null,"要理解我们可以这么做，首先我们需要弄清楚什么是",Object(c.b)("inlineCode",{parentName:"p"},"ReactElement"),"。因为我们大部分时候写",Object(c.b)("inlineCode",{parentName:"p"},"React"),"组件的时候用的都是",Object(c.b)("inlineCode",{parentName:"p"},"JSX"),"，所以很多同学可能并不知道",Object(c.b)("inlineCode",{parentName:"p"},"ReactElement"),"的存在。"),Object(c.b)("p",null,"其实",Object(c.b)("inlineCode",{parentName:"p"},"JSX"),"经过",Object(c.b)("inlineCode",{parentName:"p"},"babel"),"翻译之后得到的是如下代码："),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// jsx"),"\n;",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"<",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"div")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-attr"}),"id"),"=",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-string"}),"'id'"),">"),"content",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"</",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"div"),">")),"\n\n",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-comment"}),"// js"),"\nReact.createElement(",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-string"}),"'div'"),", { ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-attr"}),"id"),": ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-string"}),"'id'")," }, ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-string"}),"'content'"),")")),Object(c.b)("p",null,"这个函数接收三个参数"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"component"),"具体渲染的组件，包括原生 dom 节点(",Object(c.b)("inlineCode",{parentName:"li"},"string"),")和自定义组件(",Object(c.b)("inlineCode",{parentName:"li"},"object"),")"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"config"),"，包括所有",Object(c.b)("inlineCode",{parentName:"li"},"props"),"再加上",Object(c.b)("inlineCode",{parentName:"li"},"key"),"和",Object(c.b)("inlineCode",{parentName:"li"},"ref"),"形成的字典对象"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"children"),"，子节点内容，可以是",Object(c.b)("inlineCode",{parentName:"li"},"ReactElement"),"、",Object(c.b)("inlineCode",{parentName:"li"},"Array"),"、",Object(c.b)("inlineCode",{parentName:"li"},"string"),"等内容")),Object(c.b)("p",null,"最后他返回的是一个叫做",Object(c.b)("inlineCode",{parentName:"p"},"ReactElement"),"类型的对象，他会包含后续 React 渲染过程中需要用到的一个节点包含的所有信息，我们的",Object(c.b)("inlineCode",{parentName:"p"},"props.children"),"其实就是最典型的",Object(c.b)("inlineCode",{parentName:"p"},"ReactElement"),"。"),Object(c.b)("p",null,"所以在上诉例子中，我们传入的",Object(c.b)("inlineCode",{parentName:"p"},"header"),"就是一个",Object(c.b)("inlineCode",{parentName:"p"},"ReactElement"),"，所以可以直接作为其他节点的",Object(c.b)("inlineCode",{parentName:"p"},"children"),"而使用。"),Object(c.b)("p",null,"同时使用这种方式我们还获得来一个非常大的优势，那就是我们甚至可以重新定义一个组件，就可以直接使用",Object(c.b)("inlineCode",{parentName:"p"},"Layout"),"。"),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),"<Layout header={<h1>The Other Title<",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-regexp"}),"/h1>}>\n  <div>Content Here</"),"div>\n",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"</",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"Layout"),">")))),Object(c.b)("p",null,"这样同样也是可以行得通的。"),Object(c.b)("p",null,"那么是否到这里我们就大功告成来呢？NO，NO，NO，我们还是有值得优化的地方。"),Object(c.b)("h3",null,"第三版"),Object(c.b)("p",null,"试想一下，如果我们的",Object(c.b)("inlineCode",{parentName:"p"},"Layout"),"中接收来",Object(c.b)("inlineCode",{parentName:"p"},"header"),"是一个节点，但是呢他希望对传入的组件的一些",Object(c.b)("inlineCode",{parentName:"p"},"props"),"有强制的要求呢？比如我们的",Object(c.b)("inlineCode",{parentName:"p"},"Header"),"组件如果还有另外一个",Object(c.b)("inlineCode",{parentName:"p"},"prop"),"叫",Object(c.b)("inlineCode",{parentName:"p"},"color"),"，用来指定文字内容的显示颜色："),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-function"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"function")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"Header"),"(",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-params"}),"{ message = ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-string"}),"'Title Here'"),", color = ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-string"}),"'red'")," }"),") "),"{\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"<",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"h1")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-attr"}),"style"),"=",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-string"}),"{{")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-attr"}),"color")," }}>"),"{message}",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"</",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"h1"),">")),"\n}")),Object(c.b)("p",null,"而",Object(c.b)("inlineCode",{parentName:"p"},"Layout"),"要求所有传入的",Object(c.b)("inlineCode",{parentName:"p"},"Header"),"必须颜色是",Object(c.b)("inlineCode",{parentName:"p"},"green"),"，显示我们也可以在使用",Object(c.b)("inlineCode",{parentName:"p"},"Header"),"组件的时候自己指定这个",Object(c.b)("inlineCode",{parentName:"p"},"prop"),"，但是如果我们需要强制指定的",Object(c.b)("inlineCode",{parentName:"p"},"prop"),"很多，而且使用",Object(c.b)("inlineCode",{parentName:"p"},"Layout"),"的地方也很多，那么明显我们会写很多重复代码，而且如果后面我们需要修改这个要求的时候也会导致多次修改，甚至有些地方忘了修改而导致 bug。那么这时候我们该怎么做呢？"),Object(c.b)("p",null,"我们可以使用一个 API，这个 API 并不常用，但是在这种场景下，他却非常有用，这就是",Object(c.b)("inlineCode",{parentName:"p"},"React.cloneElement"),"，我们来修改一下",Object(c.b)("inlineCode",{parentName:"p"},"Layout")),Object(c.b)("pre",null,Object(c.b)("code",Object.assign({parentName:"pre"},{className:"hljs language-js"}),Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-function"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-keyword"}),"function")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-title"}),"Layout"),"(",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-params"}),"{ header, children }"),") "),"{\n  ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"hljs-keyword"}),"return")," (\n    ",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"<",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"div")," ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-attr"}),"className"),"=",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-string"}),"'container'"),">"),"\n      "),"<div className='header'>\n        {React.cloneElement(header, { color: 'green' })}\n      </div>",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),"\n      "),"<div classNmae='content'>{children}</div>",Object(c.b)("span",Object.assign({parentName:"code"},{className:"xml"}),"\n    ",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-tag"}),"</",Object(c.b)("span",Object.assign({parentName:"span"},{className:"hljs-name"}),"div"),">")),"\n  )\n}")),Object(c.b)("p",null,"通过这样，我们真正渲染出来的",Object(c.b)("inlineCode",{parentName:"p"},"Header"),"他的",Object(c.b)("inlineCode",{parentName:"p"},"props.color"),"就永远都是",Object(c.b)("inlineCode",{parentName:"p"},"green"),"。那么这个 API 是啥意思呢？"),Object(c.b)("p",null,"顾名思义，他是用来",Object(c.b)("strong",{parentName:"p"},"克隆"),"一个",Object(c.b)("inlineCode",{parentName:"p"},"ReactElement"),",他接收三个参数，第一个是目标",Object(c.b)("inlineCode",{parentName:"p"},"element"),"，第二个是",Object(c.b)("inlineCode",{parentName:"p"},"props"),"，第三个是",Object(c.b)("inlineCode",{parentName:"p"},"children"),"。可见他跟",Object(c.b)("inlineCode",{parentName:"p"},"createElement"),"非常像，唯一的区别是第一个参数从组件变成来节点。"),Object(c.b)("p",null,"他做的事情其实就是拷贝目标",Object(c.b)("inlineCode",{parentName:"p"},"element"),"，并把后面两个参数覆盖原",Object(c.b)("inlineCode",{parentName:"p"},"element"),"的",Object(c.b)("inlineCode",{parentName:"p"},"props"),"，以此创建一个新的",Object(c.b)("inlineCode",{parentName:"p"},"ReactElement"),"。"),Object(c.b)("hr",null),Object(c.b)("p",null,"那么到此，我们的优化过程也差不多来，当然 demo 显然是非常简单的代码，现实中的问题往往要复杂很多，比如接收的如果不是一个",Object(c.b)("inlineCode",{parentName:"p"},"ReactElement"),"而是数组，字符串该如何处理。那么这些问题在这里就不再继续深入来，留给各位小伙伴自己去思考吧，毕竟万变不离其宗，知道了核心思路之后，其他问题也就可以迎刃而解来。"))}j.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-blog-react-react-clone-element-md-486ae4045e73761437a9.js.map