{"version":3,"sources":["webpack:///./src/pages/blog/react/why-react-redux-not-update-hooks.md"],"names":["_frontmatter","title","cover","date","description","tags","layoutProps","MDXLayout","MDXContent","_ref","components","props","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1___default","Object","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","assign","mdxType","parentName","className","href","src","alt","isMDXComponent"],"mappings":"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","file":"component---src-pages-blog-react-why-react-redux-not-update-hooks-md-9320c3c30c3e8b1a7374.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"为什么react-redux没有更新hooks API\",\n  \"cover\": \"http://ww1.sinaimg.cn/large/a90af92bly1g0qi36cwv4j20yn077aar.jpg\",\n  \"date\": \"2019-02-27\",\n  \"description\": \"React Hooks 正式发布之后，正常来说社区的大部分类库都会及时跟进，但是为什么到现在 React-Redux 到目前都没有更新 Hooks 的 API 呢？因为这里存在着一个 Context API 的性能问题...\",\n  \"tags\": [\"react\", \"redux\"]\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <blockquote>\n      <p parentName=\"blockquote\">{`按照正常来讲，像 React-Redux 这一类较为活跃的社区类库，在 React 有较大的更新出现的时候一般都会及时跟进的。而这一次 React 的 Hooks 发布，有将近两个月的 beta 期，以及到截止本篇文章发布已经 Hooks 正式版也已经将近一个月来，React-Redux 到现在都没有正式发布一个类似`}<inlineCode parentName=\"p\">{`useRedux`}</inlineCode>{`这样的 Hooks API，那么这是为什么呢？我们来分析一下原因。`}</p>\n    </blockquote>\n    <p>{`去年年底，出于兴趣，研究了一波 redux 和 react-redux 的源码，除了在原理上的理解之外，让我较为好奇的一点就是：`}<strong parentName=\"p\">{`React-Redux`}</strong>{`到目前为止都没有对 Hooks 进行支持。从使用角度上来讲，出现一个类似：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"hljs language-js\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"hljs-function\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-keyword\"\n          }}>{`function`}</span>{` `}<span parentName=\"span\" {...{\n            \"className\": \"hljs-title\"\n          }}>{`ConnectedComponent`}</span>{`(`}<span parentName=\"span\" {...{\n            \"className\": \"hljs-params\"\n          }}></span>{`) `}</span>{`{\n  `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`const`}</span>{` store = useReduxStore()\n  `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`const`}</span>{` state = useRedux(`}<span parentName=\"code\" {...{\n          \"className\": \"hljs-function\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-keyword\"\n          }}>{`function`}</span>{` `}<span parentName=\"span\" {...{\n            \"className\": \"hljs-title\"\n          }}>{`mapState`}</span>{`(`}<span parentName=\"span\" {...{\n            \"className\": \"hljs-params\"\n          }}></span>{`))\n}`}</span></code></pre>\n    <p>{`这样的代码是非常可以理解的，而且也是非常符合 Hooks 的使用习惯的，事实上社区上也出现来很多非官方的 reudx Hooks 的类库：`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/facebookincubator/redux-react-hook\"\n        }}>{`react-redux-hooks`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/philipp-spiess/use-substate\"\n        }}>{`use-substate`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/martynaskadisa/react-use-redux\"\n        }}>{`react-use-redux`}</a></li>\n    </ul>\n    <p>{`说明了总体上社区对于 Hooks 的接受度是很高的，大家应该都在期待官方能给出一个真正的 Hooks API。那么为什么 React-Redux 到现在都没有发布正式的 Hooks API 呢？`}</p>\n    <p>{`在翻阅 React-Redux 的 issues 列表的时候，我发现了`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/reduxjs/react-redux/issues/1177\"\n      }}>{`这个 issue`}</a>{`。作者非常完整得为我们介绍了 React-Redux 从最初得 idea 到现在 v6 版本得成长历程。那么 v6 版本相比 v5 版本有哪些大的变化呢？`}</p>\n    <ul>\n      <li parentName=\"ul\">{`使用`}<inlineCode parentName=\"li\">{`createContext`}</inlineCode>{`来传递 state`}</li>\n      <li parentName=\"ul\">{`只有`}<inlineCode parentName=\"li\">{`Provider`}</inlineCode>{`订阅了 store 的变化`}</li>\n      <li parentName=\"ul\">{`不再对被`}<inlineCode parentName=\"li\">{`connect`}</inlineCode>{`的组件传递 store 对象`}</li>\n    </ul>\n    <p>{`v6 版本更新这些内容的主要原因如下：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`老的 context API 即将被删除，并且如果和新的 context API 一起使用会有问题`}</li>\n      <li parentName=\"ul\">{`React 即将推出`}<inlineCode parentName=\"li\">{`Concurrent Mode`}</inlineCode>{`异步渲染，如果使用老的方式可能会导致不同的子树获取的状态不同，使用新的 context API，React 会确保整棵树拿到的是相同的状态`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`createContext`}</inlineCode>{`默认带有`}<em parentName=\"li\">{`top-down`}</em>{`数据流，不再需要 React-Redux 自己实现`}</li>\n    </ul>\n    <p>{`以上是 v6 版本的变化和其原因，但是到目前为止我们好像并没有看到任何提及 Hooks 的地方。别急，接下去就是正题了。`}</p>\n    <p>{`在升级到 v6 的过程中，React-Redux 团队发现 v6 版本的整体性能是比不上 v5 的。这个性能下降的主要原因不是 React-Redux 的实现代码有什么问题，其主要问题是来自`}<inlineCode parentName=\"p\">{`createContent`}</inlineCode>{`的实现方式，以及 React-Redux 选择了只有在`}<inlineCode parentName=\"p\">{`Provider`}</inlineCode>{`中订阅 store 变化。`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`注意`}</p>\n      <p parentName=\"blockquote\">{`React-Redux 选择使用`}<inlineCode parentName=\"p\">{`createContext`}</inlineCode>{`和只有在`}<inlineCode parentName=\"p\">{`Provider`}</inlineCode>{`中订阅都是没有任何问题的，也是 React 官方推荐的使用方法，从面向未来的眼光来看，这是势必的升级。所以同学们在后面分析问题的时候不要问，为什么不换个实现方式啥的。`}</p>\n    </blockquote>\n    <p>{`那么所谓的性能问题具体是怎么来的呢？`}<strong parentName=\"p\">{`主要原因是`}<inlineCode parentName=\"strong\">{`createContext`}</inlineCode>{`在 value 变化的时候他是如何通知子树的。`}</strong>{`我们先来看一组性能测试对比图：`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"http://ww1.sinaimg.cn/large/a90af92bly1g0qi36cwv4j20yn077aar.jpg\",\n        \"alt\": \"react-redux-benchmark\"\n      }}></img></p>\n    <p>{`这个测试用例来自`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/reduxjs/react-redux-benchmarks\"\n      }}>{`react-redux-benchmarks`}</a>{`，大家有兴趣可以自己去跑一下。`}</p>\n    <p>{`从图中我们可以看出来，v6 主要性能降低的点是来自于`}<inlineCode parentName=\"p\">{`Scripting`}</inlineCode>{`，也就是运行 JavaScript 脚本的时间，从数据上来看，是 v5 版本的两倍多。虽然在`}<inlineCode parentName=\"p\">{`Rendering`}</inlineCode>{`和`}<inlineCode parentName=\"p\">{`Painting`}</inlineCode>{`阶段要好很多，但是因为`}<inlineCode parentName=\"p\">{`Scripting`}</inlineCode>{`的占比最大，所以总体上讲是略微有些下降的。`}</p>\n    <p><strong parentName=\"p\">{`其根本原因是`}<inlineCode parentName=\"strong\">{`createContext`}</inlineCode>{`的实现方式中，我们更改了`}<inlineCode parentName=\"strong\">{`Provider`}</inlineCode>{`的 value，那么在这次更新周期中，React 会遍历`}<inlineCode parentName=\"strong\">{`Provider`}</inlineCode>{`的所有子节点，并对监听了这一个 context 的节点进行标记，让后续渲染中知道这个节点是需要更新的，即便他的 props 和 state 根本没有变化。`}</strong>{`关于为什么 React 要这么去实现的原因不是一句话能讲完的，他涉及到 React 16 之后 Fiber 判断一个节点是否有更新的方法，后面我会单独写一篇文章来讲解，现在大家只需要知道他就是这么实现的就可以了。`}</p>\n    <p>{`因为上诉的原因，我们可以想象在一个节点非常多的 React 应用中，一个类似 React-Redux 这样放置在最顶层的`}<inlineCode parentName=\"p\">{`Provier`}</inlineCode>{`数据变化之后，他的总体计算量肯定是非常大的。`}</p>\n    <p>{`相对的，在 v5 中因为使用老的 context API，为了避免一些这个 API 带来的问题，所以 React-Redux 团队选择在`}<inlineCode parentName=\"p\">{`connect`}</inlineCode>{`返回的`}<inlineCode parentName=\"p\">{`WrapperComponent`}</inlineCode>{` HOC 中进行 store 数据变化的监听，也就是说 Store 变化之后之后被`}<inlineCode parentName=\"p\">{`connect`}</inlineCode>{`的组件可能出现 props 上的变化，而没有任何需要遍历子树的需要。`}</p>\n    <p>{`以上就是 v6 版本在性能上不升反降的原因。这也是 React 新的 context API 不是很适合用在变化频繁的数据上原因。我们可以想象如果我们像以前一样把一个表单的所有项数据都缓存在 redux store 里面，每次输入都要更新 store，可能带来的对整体性能的影响。关于这一块，React 也有一个`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/facebook/react/issues/14110\"\n      }}>{`issue`}</a>{`在讨论是否以及如何设计一个方案来解决这个性能上的问题。这个讨论非常热闹，大家有兴趣可以关注一下。`}</p>\n    <p>{`那么到现在为止我们还是没有讲到 Hooks 相关的任何内容，是不是有点偏题了？不，因为我们已经知道了大部分的原因，那就是新的 context API 存在的性能问题。而这个问题，反应到 Hooks 上面，则会更大程度地体现出来。`}</p>\n    <p>{`如果我们要封装一个类似`}<inlineCode parentName=\"p\">{`useRedux`}</inlineCode>{`这样的 Hook，那么我们肯定需要用到`}<inlineCode parentName=\"p\">{`useContext`}</inlineCode>{`来获取`}<inlineCode parentName=\"p\">{`Provider`}</inlineCode>{`提供的 state，毕竟`}<inlineCode parentName=\"p\">{`Provider`}</inlineCode>{`是唯一订阅来 store 变化的。而使用了`}<inlineCode parentName=\"p\">{`useContext`}</inlineCode>{`，就代表我们这个组件是`}<strong parentName=\"p\">{`依赖于`}</strong>{`这个 context 的，也就是说一旦 state 变化，这个组件就会被标记为`}<strong parentName=\"p\">{`需要更新`}</strong>{`。`}</p>\n    <p>{`而按照我们一直以来的使用 React-Reudx 的情况，我们都会提供`}<inlineCode parentName=\"p\">{`mapState`}</inlineCode>{`来映射组件真正需要监听的数据，因为 store 是整个应用的，不太会存在某一个组件需要整个应用所有的数据的情况。这种情况下，在 v5 版本中，甚至是在 v6 版本中使用`}<inlineCode parentName=\"p\">{`connect`}</inlineCode>{`的情况，都会在 HOC 中进行`}<inlineCode parentName=\"p\">{`mapState`}</inlineCode>{`的执行进行数据映射，然后通过`}<inlineCode parentName=\"p\">{`shallowEqual`}</inlineCode>{`判断是否有依赖的 state 变化，如果没有其实是不需要更新真正的组件的。`}</p>\n    <p>{`但是在使用`}<inlineCode parentName=\"p\">{`useContext`}</inlineCode>{`的情况，即便我们给`}<inlineCode parentName=\"p\">{`useRedux`}</inlineCode>{`提供来`}<inlineCode parentName=\"p\">{`mapState`}</inlineCode>{`，但是他的执行依然要等到这个组件真正开始执行更新的时候。也就是说我们无法让 React 在更新这个组件之前就判断他是否可以不被更新，那么 React 提供的优化就没啥用了。`}</p>\n    <p>{`而同时一旦我们的组件开始执行，即便我们发现`}<inlineCode parentName=\"p\">{`useRedux`}</inlineCode>{`返回的 map 之后的 state 其实跟上一次是一样的，我们也无法告诉 React 这个组件其实是不需要更新的来终止这次更新。所以，这是一个无法在`}<strong parentName=\"p\">{`类库层面进行的优化。`}</strong>{`要优化我们只有通过使用者自己使用`}<inlineCode parentName=\"p\">{`useMemo`}</inlineCode>{`这样的 API，那么对于开发经验不是那么多的同学，很可能会导致这个组件会被频繁进行无用更新，而导致性能浪费。`}</p>\n    <p>{`那么以上就是为什么 React-Redux 以及很多常用类库还没有更新 Hooks API 的原因来，目前来说这个性能问题较为无解，React 官方也在考虑是否要出一些新的 context 相关的 API 来专门优化更新频率较高的情况，我们也只能拭目以待了。`}</p>\n    <p>{`目前来说，如果你不清楚`}<inlineCode parentName=\"p\">{`createContent`}</inlineCode>{`的这些问题，建议不要把经常需要更新的内容放在 context 里面（除非没有别的方法）。`}</p>\n    <p>{`以上，就是我对于为什么 Hooks 现在呼声这么高，但是社区支持却没有这么快跟进的原因分析，如果有任何问题，可以直接回复邮件，或者在我的`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Jokcy/AMA/issues\"\n      }}>{`AMA（Ask Me Anything）`}</a>{`中给我提问，我都会浏览，并且进行解答。`}</p>\n    <p>{`另外在这里提出的一些问题，也会在后续进行更详细的解析：`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`createContext`}</inlineCode>{` 为什么在更新的时候要遍历所有子树节点`}</li>\n      <li parentName=\"ul\">{`React 中判断一个节点是否可以跳过更新的判断条件`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}