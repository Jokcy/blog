{"version":3,"sources":["webpack:///./src/pages/blog/vue/vue-hooks-preview.md"],"names":["_frontmatter","title","date","cover","description","tags","layoutProps","MDXLayout","MDXContent","_ref","components","props","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1___default","Object","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","assign","mdxType","parentName","className","href","isMDXComponent"],"mappings":"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","file":"component---src-pages-blog-vue-vue-hooks-preview-md-2716511e8ba8afb04dae.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"vue hook API 可能存在的问题\",\n  \"date\": \"2019-06-24\",\n  \"cover\": \"http://www.getgametackle.com.au/wp-content/uploads/2016/06/MEAT-HOOK-D-STYLE.png\",\n  \"description\": \"Vue 作者前几天发布了一个关于 vue3 的 RFC，其内容主要描述来函数式组件以及 hook API 的使用，而这个却引发来社区的激烈讨论，其中不乏批评之声，那么我们来看看这个 API 到底有什么独特之处\",\n  \"tags\": [\"vue\"]\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`关于最近 Vue 社区的激烈讨论，不知道大家是否有所耳闻。其主要原因是 Evan You 前几天发布了一个新的关于 Vue3 的 RFC，主要描述了 hook API，通过 `}<inlineCode parentName=\"p\">{`setup`}</inlineCode>{` 方法，我们可以不需要再区分书写 `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`，`}<inlineCode parentName=\"p\">{`computed`}</inlineCode>{`，`}<inlineCode parentName=\"p\">{`watch`}</inlineCode>{` 等属性来创建一个 vue 组件。`}</p>\n    <p>{`对于这个提案，社区的反应却非常激烈，甚至有很多的批评声，很多人觉得这个新的组件书写方式完全改变了老的组件开发模式，导致社区以前的积累都白费来。也有人觉得这个 API 完全就是抄袭 react 的，对于 vue 来说并不是特别需要。`}</p>\n    <p>{`在这里我简单讲一下我的见解，vue 的这个提案本质上跟 react 的 hook API 确实是非常像的，同时他们解决的也是同一个问题。这个问题其实是现在的组件化框架都存在的，简单概括就是：`}<strong parentName=\"p\">{`组件化可以很好得分解功能，却对于一些没有那么明确分块的逻辑无能为力。`}</strong></p>\n    <p>{`所以即便这个方案是 react 先出的，你要说抄袭，那也没有这么夸张，毕竟是实际能解决问题的，而不是为了提供 react 相同的功能而去做的。`}</p>\n    <p>{`具体关于这块我不在这里继续深入，这篇文章主要是想讲一个可能比较严重的问题，如果这个问题无法解决，那么 vue 的 hook API 可能前途并不明朗。`}</p>\n    <p>{`这个问题非常简单，假设我们有如下组件：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"hljs language-js\"\n      }}>{`{\n  `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-attr\"\n        }}>{`props`}</span>{`: [`}<span parentName=\"code\" {...{\n          \"className\": \"hljs-string\"\n        }}>{`'data'`}</span>{`]\n  template: `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-string\"\n        }}>{`\\`<span>{{num}}</span>\\``}</span>{`,\n  setup(props) {\n    `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`const`}</span>{` data = props.data\n\n    `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`const`}</span>{` num = computed(`}<span parentName=\"code\" {...{\n          \"className\": \"hljs-function\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-params\"\n          }}>{`()`}</span>{` =>`}</span>{` data.num + `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-number\"\n        }}>{`1`}</span>{`)\n\n    `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`return`}</span>{` { num }\n  }\n}`}</code></pre>\n    <p>{`我们在使用的时候可以这么做：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"hljs language-js\"\n      }}>{`{\n  `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-attr\"\n        }}>{`template`}</span>{`: `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-string\"\n        }}>{`\\`<Comp :data=\"data\" />\\``}</span>{`,\n  setup() {\n    `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`const`}</span>{` num = value(`}<span parentName=\"code\" {...{\n          \"className\": \"hljs-number\"\n        }}>{`0`}</span>{`)\n\n    `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`const`}</span>{` data = computed(`}<span parentName=\"code\" {...{\n          \"className\": \"hljs-function\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"hljs-params\"\n          }}>{`()`}</span>{` =>`}</span>{` ({ num, `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-comment\"\n        }}>{`/* 其他数据。。。 */`}</span>{` }))\n\n    `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-comment\"\n        }}>{`// 其他设置`}</span>{`\n\n    `}<span parentName=\"code\" {...{\n          \"className\": \"hljs-keyword\"\n        }}>{`return`}</span>{` { data }\n  }\n}`}</code></pre>\n    <p>{`以上的代码是非常自然的，有可能会出现在平时写页面和组件的时候。但是这里就出现了一个问题，我们在修改父组件的`}<inlineCode parentName=\"p\">{`num`}</inlineCode>{`的时候，子组件的`}<inlineCode parentName=\"p\">{`num`}</inlineCode>{`是无法更新的。`}</p>\n    <p>{`会出现这个问题也是非常好理解的，vue 中的 `}<inlineCode parentName=\"p\">{`computed`}</inlineCode>{` 的实现原理是他会执行一次传入的方法，在执行方法的时候，根据执行到某个数据获取的时候，把当前的 `}<inlineCode parentName=\"p\">{`computed`}</inlineCode>{` 作为一个依赖放入到数据的根性流程中。`}</p>\n    <p>{`到这个例子里面，我们执行 `}<inlineCode parentName=\"p\">{`const num = computed(() => data.num + 1)`}</inlineCode>{` 这句代码的时候，发现我们读取了 `}<inlineCode parentName=\"p\">{`data.num`}</inlineCode>{`，那么这个 `}<inlineCode parentName=\"p\">{`computed`}</inlineCode>{` 就会作为 `}<inlineCode parentName=\"p\">{`data.num`}</inlineCode>{` 的依赖，在后续 `}<inlineCode parentName=\"p\">{`data.num`}</inlineCode>{` 更新之后，会再次执行这个 `}<inlineCode parentName=\"p\">{`computed`}</inlineCode>{` 并更新 `}<inlineCode parentName=\"p\">{`num`}</inlineCode></p>\n    <p>{`那么为什么在这个例子中最终子组件的 `}<inlineCode parentName=\"p\">{`num`}</inlineCode>{` 没有更新呢？因为在这里父组件改变了整个`}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`，而不是 `}<inlineCode parentName=\"p\">{`data.num`}</inlineCode>{`。要解决这个问题也非常简单，我们使用 `}<inlineCode parentName=\"p\">{`props.data.num + 1`}</inlineCode>{` 作为 `}<inlineCode parentName=\"p\">{`computed`}</inlineCode>{` 的返回就可以。这两种方式的区别是后者把 `}<inlineCode parentName=\"p\">{`props.data`}</inlineCode>{` 也作为依赖，所以他改变的话也会引起更新。`}</p>\n    <p><strong parentName=\"p\">{`但是，需要注意的是，对于一个函数来说，我们使用上面的写法是完全没有问题的。`}</strong>{`这个问题对于不那么理解 vue 的响应式原理的同学来说，不是那么明了的。这其实就跟 react 的 hooks API 不能在判断条件中调用一样，是一个使用 hook API 的先觉条件。我们完全可以通过所有的 `}<inlineCode parentName=\"p\">{`props`}</inlineCode>{` 调用都直接在 `}<inlineCode parentName=\"p\">{`props`}</inlineCode>{` 上直接操作，不预先读取某个对象然后再操作，来规避这个问题，但不免会显得有点啰嗦。`}</p>\n    <p>{`同时这个问题可能比 react 的问题更为严重，因为他很难消除也很难监控，你很难通过一个 eslint 插件来监控这种问题，而一旦这个问题出现了，在代码较为复杂的情况下，你也是很难查找问题的。`}</p>\n    <p>{`所以以上是我在尝试 vue 的 hook API 的时候遇到的第一个问题。介于毕竟目前能够使用的只是在 vue2 基础上实现的模拟 API，我并不能下定论说这个问题是存在的，可能在 vue3 正式发布的时候已经解决了，所以这里也只是抛砖引玉，跟大家分享一下。同时我也把这个也在 vue 的 issue 列表里反馈了一下，虽然好像没怎么引起注意就是了。`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/vuejs/vue/issues/10198\"\n      }}>{`issue 在这`}</a></p>\n    <p>{`上面 demo 的运行结果可以看`}<a parentName=\"p\" {...{\n        \"href\": \"https://codesandbox.io/s/vue-template-zlflg?fontsize=14\"\n      }}>{`这里`}</a></p>\n    <p>{`另外模拟 API 的库是`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/vuejs/vue-function-api\"\n      }}>{`这个`}</a>{`，大家有兴趣可以自己去用用看。`}</p>\n    <p>{`最后，个人其实是非常喜欢这个 API 的模式的，但是不得不说，需要解决的问题还是挺多的。另外使用函数式的 API 却依然要写静态模版来绑定总感觉还是有点怪。但不论如何，让我们一起期待 vue3 带来的变化吧。`}</p>\n\n    </MDXLayout>;\n}\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}